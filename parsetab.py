
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left<>EQLEQGEQNEQleft=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNDOTADDASSIGNDOTSUBASSIGNDOTMULASSIGNDOTDIVASSIGNleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVleftTRANSPOSEleft[](left{}BREAKCONTINUERETURNPRINTWHILEFORONESZEROSEYEIFELSEleft;,ADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTADDASSIGN DOTDIV DOTDIVASSIGN DOTMUL DOTMULASSIGN DOTSUB DOTSUBASSIGN ELSE EQ EYE FLOAT FOR GEQ ID IF INTEGER LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN TRANSPOSE WHILE ZEROSprogram : instructionsinstructions : instruction instructions\n                        | instruction\n                        | '{' instructions '}'instruction  : assignment ';'\n                        | conditional\n                        | BREAK ';'\n                        | CONTINUE ';'\n                        | RETURN rvalue ';'\n                        | RETURN ';'\n                        | PRINT '(' prtvalues ')' ';' assignment   : variable '=' rvalue\n                        | variable DOTADDASSIGN rvalue\n                        | variable DOTSUBASSIGN rvalue\n                        | variable DOTMULASSIGN rvalue\n                        | variable DOTDIVASSIGN rvalue\n                        | variable ADDASSIGN rvalue\n                        | variable SUBASSIGN rvalue\n                        | variable MULASSIGN rvalue\n                        | variable DIVASSIGN rvaluevariable : ID\n                    | matrixelemmatrixelem   : ID '[' numexpr ',' numexpr ']'conditional  : IF '(' cond ')' block\n                        | IF '(' cond ')' block ELSE block\n                        | FOR '(' forexpr ')' block\n                        | WHILE '(' cond ')' blockcond : logexpr\n                | IDblock : instruction\n                 | '{' instructions '}' prtvalues    : rvalue ',' prtvalues\n                        | rvaluervalue   : numexpr\n                    | matrix\n                    | logexpr\n                    | STRING\n                    | IDforexpr  : ID '=' matrixmatrix   : numexpr ':' numexpr\n                    | '[' rows ']'\n                    | '(' matrix ')'\n                    | ZEROS '(' numexpr ')'\n                    | ONES '(' numexpr ')'\n                    | EYE '(' numexpr ')'\n                    | matrix TRANSPOSE\n                    | IDrows : rowelems ';' rows\n                | rowelemsrowelems : rvalue ',' rowelems\n                    | rvaluelogexpr  : numexpr EQ numexpr\n                    | numexpr GEQ numexpr\n                    | numexpr LEQ numexpr\n                    | numexpr NEQ numexpr\n                    | numexpr '>' numexpr\n                    | numexpr '<' numexprnumexpr  : numexpr '+' numexpr\n                    | numexpr '-' numexpr\n                    | numexpr '*' numexpr\n                    | numexpr '/' numexpr\n                    | numexpr DOTADD numexpr\n                    | numexpr DOTSUB numexpr\n                    | numexpr DOTMUL numexpr\n                    | numexpr DOTDIV numexpr\n                    | '(' numexpr ')'\n                    | '-' numexpr\n                    | ID\n                    | INTEGER\n                    | FLOAT\n                    | matrix"
    
_lr_action_items = {'{':([0,3,4,6,19,20,21,23,52,124,125,127,134,136,137,138,139,144,146,151,152,],[4,4,4,-6,-5,-7,-8,-10,-9,138,138,138,-11,-24,-30,4,-26,-27,138,-25,-31,]),'BREAK':([0,3,4,6,19,20,21,23,52,124,125,127,134,136,137,138,139,144,146,151,152,],[7,7,7,-6,-5,-7,-8,-10,-9,7,7,7,-11,-24,-30,7,-26,-27,7,-25,-31,]),'CONTINUE':([0,3,4,6,19,20,21,23,52,124,125,127,134,136,137,138,139,144,146,151,152,],[8,8,8,-6,-5,-7,-8,-10,-9,8,8,8,-11,-24,-30,8,-26,-27,8,-25,-31,]),'RETURN':([0,3,4,6,19,20,21,23,52,124,125,127,134,136,137,138,139,144,146,151,152,],[9,9,9,-6,-5,-7,-8,-10,-9,9,9,9,-11,-24,-30,9,-26,-27,9,-25,-31,]),'PRINT':([0,3,4,6,19,20,21,23,52,124,125,127,134,136,137,138,139,144,146,151,152,],[10,10,10,-6,-5,-7,-8,-10,-9,10,10,10,-11,-24,-30,10,-26,-27,10,-25,-31,]),'IF':([0,3,4,6,19,20,21,23,52,124,125,127,134,136,137,138,139,144,146,151,152,],[12,12,12,-6,-5,-7,-8,-10,-9,12,12,12,-11,-24,-30,12,-26,-27,12,-25,-31,]),'FOR':([0,3,4,6,19,20,21,23,52,124,125,127,134,136,137,138,139,144,146,151,152,],[13,13,13,-6,-5,-7,-8,-10,-9,13,13,13,-11,-24,-30,13,-26,-27,13,-25,-31,]),'WHILE':([0,3,4,6,19,20,21,23,52,124,125,127,134,136,137,138,139,144,146,151,152,],[14,14,14,-6,-5,-7,-8,-10,-9,14,14,14,-11,-24,-30,14,-26,-27,14,-25,-31,]),'ID':([0,3,4,6,9,19,20,21,23,29,30,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,117,118,123,124,125,126,127,128,134,136,137,138,139,143,144,146,151,152,],[15,15,15,-6,28,-5,-7,-8,-10,70,70,28,28,28,28,28,28,28,28,28,28,28,93,96,93,70,-9,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,28,28,28,15,15,140,15,70,-11,-24,-30,15,-26,140,-27,15,-25,-31,]),'$end':([1,2,3,6,17,19,20,21,23,51,52,134,136,137,139,144,151,152,],[0,-1,-3,-6,-2,-5,-7,-8,-10,-4,-9,-11,-24,-30,-26,-27,-25,-31,]),'}':([3,6,17,18,19,20,21,23,51,52,134,136,137,139,144,147,151,152,],[-3,-6,-2,51,-5,-7,-8,-10,-4,-9,-11,-24,-30,-26,-27,152,-25,-31,]),';':([5,7,8,9,22,24,25,26,27,28,31,32,68,69,70,71,75,76,82,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,122,130,131,132,133,],[19,20,21,23,52,-34,-35,-36,-37,-38,-69,-70,-46,-67,-47,-71,117,-51,-12,-13,-14,-15,-16,-17,-18,-19,-20,-58,-59,-60,-61,-62,-63,-64,-65,-40,-52,-53,-54,-55,-56,-57,-66,-42,-41,134,-50,-43,-44,-45,]),'ELSE':([6,19,20,21,23,52,134,136,137,139,144,151,152,],[-6,-5,-7,-8,-10,-9,-11,146,-30,-26,-27,-25,-31,]),'STRING':([9,33,37,38,39,40,41,42,43,44,45,46,117,118,123,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'(':([9,10,12,13,14,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,117,118,123,126,128,143,],[30,37,47,48,49,30,30,30,77,78,79,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,143,30,143,]),'-':([9,24,25,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,78,79,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,126,128,131,132,133,140,141,142,143,145,148,149,],[29,54,-71,-47,29,29,-69,-70,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-46,-67,-47,-71,54,-71,29,29,29,-47,54,54,-58,-59,-60,-61,-62,-63,-64,-65,54,54,54,54,54,54,54,-66,-42,-41,29,29,54,54,54,29,29,29,-43,-44,-45,-47,-71,54,29,54,-71,54,]),'INTEGER':([9,29,30,33,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,117,118,123,126,128,143,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'FLOAT':([9,29,30,33,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,117,118,123,126,128,143,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'[':([9,15,29,30,33,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,117,118,123,126,128,143,],[33,50,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'ZEROS':([9,29,30,33,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,117,118,123,126,128,143,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'ONES':([9,29,30,33,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,117,118,123,126,128,143,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'EYE':([9,29,30,33,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,117,118,123,126,128,143,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'=':([11,15,16,96,150,],[38,-21,-22,126,-23,]),'DOTADDASSIGN':([11,15,16,150,],[39,-21,-22,-23,]),'DOTSUBASSIGN':([11,15,16,150,],[40,-21,-22,-23,]),'DOTMULASSIGN':([11,15,16,150,],[41,-21,-22,-23,]),'DOTDIVASSIGN':([11,15,16,150,],[42,-21,-22,-23,]),'ADDASSIGN':([11,15,16,150,],[43,-21,-22,-23,]),'SUBASSIGN':([11,15,16,150,],[44,-21,-22,-23,]),'MULASSIGN':([11,15,16,150,],[45,-21,-22,-23,]),'DIVASSIGN':([11,15,16,150,],[46,-21,-22,-23,]),',':([24,25,26,27,28,31,32,68,69,70,71,76,81,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,131,132,133,],[-34,-35,-36,-37,-38,-69,-70,-46,-67,-47,-71,118,123,128,-58,-59,-60,-61,-62,-63,-64,-65,-40,-52,-53,-54,-55,-56,-57,-66,-42,-41,-43,-44,-45,]),']':([24,25,26,27,28,31,32,68,69,70,71,74,75,76,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,129,130,131,132,133,145,],[-34,-35,-36,-37,-38,-69,-70,-46,-67,-47,-71,116,-49,-51,-58,-59,-60,-61,-62,-63,-64,-65,-40,-52,-53,-54,-55,-56,-57,-66,-42,-41,-48,-50,-43,-44,-45,150,]),')':([24,25,26,27,28,31,32,68,69,70,71,72,73,80,81,91,92,93,95,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,131,132,133,135,140,141,148,149,],[-34,-35,-36,-37,-38,-69,-70,-46,-67,-47,-71,114,115,122,-33,124,-28,-29,125,127,-58,-59,-60,-61,-62,-63,-64,-65,-40,-52,-53,-54,-55,-56,-57,-66,-42,-41,131,132,133,-43,-44,-45,-32,-47,-39,115,114,]),'+':([24,25,28,31,32,68,69,70,71,72,73,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,131,132,133,140,141,142,145,148,149,],[53,-71,-47,-69,-70,-46,-67,-47,-71,53,-71,-47,53,53,-58,-59,-60,-61,-62,-63,-64,-65,53,53,53,53,53,53,53,-66,-42,-41,53,53,53,-43,-44,-45,-47,-71,53,53,-71,53,]),'*':([24,25,28,31,32,68,69,70,71,72,73,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,131,132,133,140,141,142,145,148,149,],[55,-71,-47,-69,-70,-46,55,-47,-71,55,-71,-47,55,55,55,55,-60,-61,55,55,-64,-65,55,55,55,55,55,55,55,-66,-42,-41,55,55,55,-43,-44,-45,-47,-71,55,55,-71,55,]),'/':([24,25,28,31,32,68,69,70,71,72,73,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,131,132,133,140,141,142,145,148,149,],[56,-71,-47,-69,-70,-46,56,-47,-71,56,-71,-47,56,56,56,56,-60,-61,56,56,-64,-65,56,56,56,56,56,56,56,-66,-42,-41,56,56,56,-43,-44,-45,-47,-71,56,56,-71,56,]),'DOTADD':([24,25,28,31,32,68,69,70,71,72,73,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,131,132,133,140,141,142,145,148,149,],[57,-71,-47,-69,-70,-46,-67,-47,-71,57,-71,-47,57,57,-58,-59,-60,-61,-62,-63,-64,-65,57,57,57,57,57,57,57,-66,-42,-41,57,57,57,-43,-44,-45,-47,-71,57,57,-71,57,]),'DOTSUB':([24,25,28,31,32,68,69,70,71,72,73,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,131,132,133,140,141,142,145,148,149,],[58,-71,-47,-69,-70,-46,-67,-47,-71,58,-71,-47,58,58,-58,-59,-60,-61,-62,-63,-64,-65,58,58,58,58,58,58,58,-66,-42,-41,58,58,58,-43,-44,-45,-47,-71,58,58,-71,58,]),'DOTMUL':([24,25,28,31,32,68,69,70,71,72,73,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,131,132,133,140,141,142,145,148,149,],[59,-71,-47,-69,-70,-46,59,-47,-71,59,-71,-47,59,59,59,59,-60,-61,59,59,-64,-65,59,59,59,59,59,59,59,-66,-42,-41,59,59,59,-43,-44,-45,-47,-71,59,59,-71,59,]),'DOTDIV':([24,25,28,31,32,68,69,70,71,72,73,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,131,132,133,140,141,142,145,148,149,],[60,-71,-47,-69,-70,-46,60,-47,-71,60,-71,-47,60,60,60,60,-60,-61,60,60,-64,-65,60,60,60,60,60,60,60,-66,-42,-41,60,60,60,-43,-44,-45,-47,-71,60,60,-71,60,]),':':([24,25,28,31,32,68,69,70,71,72,73,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,131,132,133,140,141,142,145,148,149,],[61,-71,-47,-69,-70,-46,-67,-47,-71,61,-71,-47,61,61,-58,-59,-60,-61,-62,-63,-64,-65,61,61,61,61,61,61,61,-66,-42,-41,61,61,61,-43,-44,-45,-47,-71,61,61,-71,61,]),'EQ':([24,25,28,31,32,68,69,70,71,93,94,99,100,101,102,103,104,105,106,107,114,115,116,131,132,133,],[62,-71,-47,-69,-70,-46,-67,-47,-71,-47,62,-58,-59,-60,-61,-62,-63,-64,-65,-40,-66,-42,-41,-43,-44,-45,]),'GEQ':([24,25,28,31,32,68,69,70,71,93,94,99,100,101,102,103,104,105,106,107,114,115,116,131,132,133,],[63,-71,-47,-69,-70,-46,-67,-47,-71,-47,63,-58,-59,-60,-61,-62,-63,-64,-65,-40,-66,-42,-41,-43,-44,-45,]),'LEQ':([24,25,28,31,32,68,69,70,71,93,94,99,100,101,102,103,104,105,106,107,114,115,116,131,132,133,],[64,-71,-47,-69,-70,-46,-67,-47,-71,-47,64,-58,-59,-60,-61,-62,-63,-64,-65,-40,-66,-42,-41,-43,-44,-45,]),'NEQ':([24,25,28,31,32,68,69,70,71,93,94,99,100,101,102,103,104,105,106,107,114,115,116,131,132,133,],[65,-71,-47,-69,-70,-46,-67,-47,-71,-47,65,-58,-59,-60,-61,-62,-63,-64,-65,-40,-66,-42,-41,-43,-44,-45,]),'>':([24,25,28,31,32,68,69,70,71,93,94,99,100,101,102,103,104,105,106,107,114,115,116,131,132,133,],[66,-71,-47,-69,-70,-46,-67,-47,-71,-47,66,-58,-59,-60,-61,-62,-63,-64,-65,-40,-66,-42,-41,-43,-44,-45,]),'<':([24,25,28,31,32,68,69,70,71,93,94,99,100,101,102,103,104,105,106,107,114,115,116,131,132,133,],[67,-71,-47,-69,-70,-46,-67,-47,-71,-47,67,-58,-59,-60,-61,-62,-63,-64,-65,-40,-66,-42,-41,-43,-44,-45,]),'TRANSPOSE':([25,28,31,32,68,69,70,71,73,93,99,100,101,102,103,104,105,106,107,114,115,116,131,132,133,140,141,148,],[68,-47,-69,-70,-46,-67,-47,68,68,-47,-58,-59,-60,-61,-62,-63,-64,-65,-40,-66,-42,-41,-43,-44,-45,-47,68,68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,3,4,138,],[2,17,18,147,]),'instruction':([0,3,4,124,125,127,138,146,],[3,3,3,137,137,137,3,137,]),'assignment':([0,3,4,124,125,127,138,146,],[5,5,5,5,5,5,5,5,]),'conditional':([0,3,4,124,125,127,138,146,],[6,6,6,6,6,6,6,6,]),'variable':([0,3,4,124,125,127,138,146,],[11,11,11,11,11,11,11,11,]),'matrixelem':([0,3,4,124,125,127,138,146,],[16,16,16,16,16,16,16,16,]),'rvalue':([9,33,37,38,39,40,41,42,43,44,45,46,117,118,123,],[22,76,81,82,83,84,85,86,87,88,89,90,76,76,81,]),'numexpr':([9,29,30,33,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,117,118,123,126,128,143,],[24,69,72,24,24,24,24,24,24,24,24,24,24,24,94,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,119,120,121,24,24,24,142,145,149,]),'matrix':([9,29,30,33,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,77,78,79,117,118,123,126,128,143,],[25,71,73,25,25,25,25,25,25,25,25,25,25,25,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,25,25,25,141,71,148,]),'logexpr':([9,33,37,38,39,40,41,42,43,44,45,46,47,49,117,118,123,],[26,26,26,26,26,26,26,26,26,26,26,26,92,92,26,26,26,]),'rows':([33,117,],[74,129,]),'rowelems':([33,117,118,],[75,75,130,]),'prtvalues':([37,123,],[80,135,]),'cond':([47,49,],[91,97,]),'forexpr':([48,],[95,]),'block':([124,125,127,146,],[136,139,144,151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','parser2.py',37),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','parser2.py',41),
  ('instructions -> instruction','instructions',1,'p_instructions','parser2.py',42),
  ('instructions -> { instructions }','instructions',3,'p_instructions','parser2.py',43),
  ('instruction -> assignment ;','instruction',2,'p_instruction','parser2.py',53),
  ('instruction -> conditional','instruction',1,'p_instruction','parser2.py',54),
  ('instruction -> BREAK ;','instruction',2,'p_instruction','parser2.py',55),
  ('instruction -> CONTINUE ;','instruction',2,'p_instruction','parser2.py',56),
  ('instruction -> RETURN rvalue ;','instruction',3,'p_instruction','parser2.py',57),
  ('instruction -> RETURN ;','instruction',2,'p_instruction','parser2.py',58),
  ('instruction -> PRINT ( prtvalues ) ;','instruction',5,'p_instruction','parser2.py',59),
  ('assignment -> variable = rvalue','assignment',3,'p_assignment','parser2.py',68),
  ('assignment -> variable DOTADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',69),
  ('assignment -> variable DOTSUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',70),
  ('assignment -> variable DOTMULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',71),
  ('assignment -> variable DOTDIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',72),
  ('assignment -> variable ADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',73),
  ('assignment -> variable SUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',74),
  ('assignment -> variable MULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',75),
  ('assignment -> variable DIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',76),
  ('variable -> ID','variable',1,'p_variable','parser2.py',80),
  ('variable -> matrixelem','variable',1,'p_variable','parser2.py',81),
  ('matrixelem -> ID [ numexpr , numexpr ]','matrixelem',6,'p_matrixelem','parser2.py',85),
  ('conditional -> IF ( cond ) block','conditional',5,'p_conditional','parser2.py',88),
  ('conditional -> IF ( cond ) block ELSE block','conditional',7,'p_conditional','parser2.py',89),
  ('conditional -> FOR ( forexpr ) block','conditional',5,'p_conditional','parser2.py',90),
  ('conditional -> WHILE ( cond ) block','conditional',5,'p_conditional','parser2.py',91),
  ('cond -> logexpr','cond',1,'p_cond','parser2.py',94),
  ('cond -> ID','cond',1,'p_cond','parser2.py',95),
  ('block -> instruction','block',1,'p_block','parser2.py',98),
  ('block -> { instructions }','block',3,'p_block','parser2.py',99),
  ('prtvalues -> rvalue , prtvalues','prtvalues',3,'p_prtvalues','parser2.py',102),
  ('prtvalues -> rvalue','prtvalues',1,'p_prtvalues','parser2.py',103),
  ('rvalue -> numexpr','rvalue',1,'p_rvalue','parser2.py',106),
  ('rvalue -> matrix','rvalue',1,'p_rvalue','parser2.py',107),
  ('rvalue -> logexpr','rvalue',1,'p_rvalue','parser2.py',108),
  ('rvalue -> STRING','rvalue',1,'p_rvalue','parser2.py',109),
  ('rvalue -> ID','rvalue',1,'p_rvalue','parser2.py',110),
  ('forexpr -> ID = matrix','forexpr',3,'p_forexpr','parser2.py',114),
  ('matrix -> numexpr : numexpr','matrix',3,'p_matrix','parser2.py',117),
  ('matrix -> [ rows ]','matrix',3,'p_matrix','parser2.py',118),
  ('matrix -> ( matrix )','matrix',3,'p_matrix','parser2.py',119),
  ('matrix -> ZEROS ( numexpr )','matrix',4,'p_matrix','parser2.py',120),
  ('matrix -> ONES ( numexpr )','matrix',4,'p_matrix','parser2.py',121),
  ('matrix -> EYE ( numexpr )','matrix',4,'p_matrix','parser2.py',122),
  ('matrix -> matrix TRANSPOSE','matrix',2,'p_matrix','parser2.py',123),
  ('matrix -> ID','matrix',1,'p_matrix','parser2.py',124),
  ('rows -> rowelems ; rows','rows',3,'p_rows','parser2.py',136),
  ('rows -> rowelems','rows',1,'p_rows','parser2.py',137),
  ('rowelems -> rvalue , rowelems','rowelems',3,'p_rowelems','parser2.py',140),
  ('rowelems -> rvalue','rowelems',1,'p_rowelems','parser2.py',141),
  ('logexpr -> numexpr EQ numexpr','logexpr',3,'p_logexpr','parser2.py',144),
  ('logexpr -> numexpr GEQ numexpr','logexpr',3,'p_logexpr','parser2.py',145),
  ('logexpr -> numexpr LEQ numexpr','logexpr',3,'p_logexpr','parser2.py',146),
  ('logexpr -> numexpr NEQ numexpr','logexpr',3,'p_logexpr','parser2.py',147),
  ('logexpr -> numexpr > numexpr','logexpr',3,'p_logexpr','parser2.py',148),
  ('logexpr -> numexpr < numexpr','logexpr',3,'p_logexpr','parser2.py',149),
  ('numexpr -> numexpr + numexpr','numexpr',3,'p_numexpr','parser2.py',167),
  ('numexpr -> numexpr - numexpr','numexpr',3,'p_numexpr','parser2.py',168),
  ('numexpr -> numexpr * numexpr','numexpr',3,'p_numexpr','parser2.py',169),
  ('numexpr -> numexpr / numexpr','numexpr',3,'p_numexpr','parser2.py',170),
  ('numexpr -> numexpr DOTADD numexpr','numexpr',3,'p_numexpr','parser2.py',171),
  ('numexpr -> numexpr DOTSUB numexpr','numexpr',3,'p_numexpr','parser2.py',172),
  ('numexpr -> numexpr DOTMUL numexpr','numexpr',3,'p_numexpr','parser2.py',173),
  ('numexpr -> numexpr DOTDIV numexpr','numexpr',3,'p_numexpr','parser2.py',174),
  ('numexpr -> ( numexpr )','numexpr',3,'p_numexpr','parser2.py',175),
  ('numexpr -> - numexpr','numexpr',2,'p_numexpr','parser2.py',176),
  ('numexpr -> ID','numexpr',1,'p_numexpr','parser2.py',177),
  ('numexpr -> INTEGER','numexpr',1,'p_numexpr','parser2.py',178),
  ('numexpr -> FLOAT','numexpr',1,'p_numexpr','parser2.py',179),
  ('numexpr -> matrix','numexpr',1,'p_numexpr','parser2.py',180),
]
