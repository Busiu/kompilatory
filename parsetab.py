
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNDOTADDASSIGNDOTSUBASSIGNDOTMULASSIGNDOTDIVASSIGNleft+-left*/leftTRANSPOSEADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTADDASSIGN DOTDIV DOTDIVASSIGN DOTMUL DOTMULASSIGN DOTSUB DOTSUBASSIGN ELSE EQ EYE FLOAT FOR GEQ ID IF INTEGER LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN TRANSPOSE WHILE ZEROSprogram : instructionsinstructions : instruction\n                        | instruction instructionsinstruction : assignment ';'\n                       | conditional\n                       | BREAK ';'\n                       | CONTINUE ';'\n                       | RETURN ';'\n                       | prt ';' assignment : ID '=' rvalue\n                      | ID DOTADDASSIGN rvalue\n                      | ID DOTSUBASSIGN rvalue\n                      | ID DOTMULASSIGN rvalue\n                      | ID DOTDIVASSIGN rvalue\n                      | ID ADDASSIGN rvalue\n                      | ID SUBASSIGN rvalue\n                      | ID MULASSIGN rvalue\n                      | ID DIVASSIGN rvalueconditional : IF '(' logexpr ')' '{' instructions '}'\n                       | IF '(' logexpr ')' instruction\n                       | IF '(' logexpr ')' '{' instructions '}' ELSE '{' instructions '}'\n                       | IF '(' logexpr ')' instruction ELSE '{' instructions '}'\n                       | IF '(' logexpr ')' '{' instructions '}' ELSE instruction\n                       | IF '(' logexpr ')' instruction ELSE instruction\n                       | FOR '(' forexpr ')' '{' instructions '}'\n                       | FOR '(' forexpr ')' instructions\n                       | WHILE '(' logexpr ')' '{' instructions '}'\n                       | WHILE '(' logexpr ')' instruction prt : PRINT '(' ID ')'\n               | PRINT '(' rvalue ')' rvalue : numexpr\n                  | matrix\n                  | logexpr\n                  | STRINGforexpr : matrix\n                   | ID '=' matrix\n                   | IDmatrix : numexpr ':' numexpr\n                  | '(' matrix ')'\n                  | ZEROS '(' numexpr ')'\n                  | ONES '(' numexpr ')'\n                  | EYE '(' numexpr ')'\n                  | matrix TRANSPOSE\n                  | IDlogexpr : numexpr EQ numexpr\n                   | numexpr GEQ numexpr\n                   | numexpr LEQ numexpr\n                   | numexpr NEQ numexpr\n                   | numexpr '>' numexpr\n                   | numexpr '<' numexpr\n                   | IDnumexpr : numexpr '+' numexpr\n                   | numexpr '-' numexpr\n                   | numexpr '*' numexpr\n                   | numexpr '/' numexpr\n                   | numexpr DOTADD numexpr\n                   | numexpr DOTSUB numexpr\n                   | numexpr DOTMUL numexpr\n                   | numexpr DOTDIV numexpr\n                   | '(' numexpr ')'\n                   | '-' numexpr\n                   | INTEGER\n                   | FLOAT\n                   | matrix\n                   | ID"
    
_lr_action_items = {'BREAK':([0,3,5,15,16,17,18,19,20,90,94,96,119,120,121,122,124,125,130,133,134,135,136,137,138,140,141,142,144,],[6,6,-5,-3,-4,-6,-7,-8,-9,6,6,6,6,-20,6,-26,6,-28,6,-19,-24,6,-25,-27,6,6,-23,-22,-21,]),'CONTINUE':([0,3,5,15,16,17,18,19,20,90,94,96,119,120,121,122,124,125,130,133,134,135,136,137,138,140,141,142,144,],[7,7,-5,-3,-4,-6,-7,-8,-9,7,7,7,7,-20,7,-26,7,-28,7,-19,-24,7,-25,-27,7,7,-23,-22,-21,]),'RETURN':([0,3,5,15,16,17,18,19,20,90,94,96,119,120,121,122,124,125,130,133,134,135,136,137,138,140,141,142,144,],[8,8,-5,-3,-4,-6,-7,-8,-9,8,8,8,8,-20,8,-26,8,-28,8,-19,-24,8,-25,-27,8,8,-23,-22,-21,]),'ID':([0,3,5,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,40,41,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,90,94,95,96,119,120,121,122,124,125,130,133,134,135,136,137,138,140,141,142,144,],[10,10,-5,-3,-4,-6,-7,-8,-9,34,34,34,34,34,34,34,34,34,57,62,57,65,84,84,93,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,10,10,93,10,10,-20,10,-26,10,-28,10,-19,-24,10,-25,-27,10,10,-23,-22,-21,]),'IF':([0,3,5,15,16,17,18,19,20,90,94,96,119,120,121,122,124,125,130,133,134,135,136,137,138,140,141,142,144,],[11,11,-5,-3,-4,-6,-7,-8,-9,11,11,11,11,-20,11,-26,11,-28,11,-19,-24,11,-25,-27,11,11,-23,-22,-21,]),'FOR':([0,3,5,15,16,17,18,19,20,90,94,96,119,120,121,122,124,125,130,133,134,135,136,137,138,140,141,142,144,],[12,12,-5,-3,-4,-6,-7,-8,-9,12,12,12,12,-20,12,-26,12,-28,12,-19,-24,12,-25,-27,12,12,-23,-22,-21,]),'WHILE':([0,3,5,15,16,17,18,19,20,90,94,96,119,120,121,122,124,125,130,133,134,135,136,137,138,140,141,142,144,],[13,13,-5,-3,-4,-6,-7,-8,-9,13,13,13,13,-20,13,-26,13,-28,13,-19,-24,13,-25,-27,13,13,-23,-22,-21,]),'PRINT':([0,3,5,15,16,17,18,19,20,90,94,96,119,120,121,122,124,125,130,133,134,135,136,137,138,140,141,142,144,],[14,14,-5,-3,-4,-6,-7,-8,-9,14,14,14,14,-20,14,-26,14,-28,14,-19,-24,14,-25,-27,14,14,-23,-22,-21,]),'$end':([1,2,3,5,15,16,17,18,19,20,120,122,125,133,134,136,137,141,142,144,],[0,-1,-2,-5,-3,-4,-6,-7,-8,-9,-20,-26,-28,-19,-24,-25,-27,-23,-22,-21,]),'ELSE':([3,5,15,16,17,18,19,20,120,122,125,133,134,136,137,141,142,144,],[-2,-5,-3,-4,-6,-7,-8,-9,130,-26,-28,138,-24,-25,-27,-23,-22,-21,]),'}':([3,5,15,16,17,18,19,20,120,122,125,129,131,132,133,134,136,137,139,141,142,143,144,],[-2,-5,-3,-4,-6,-7,-8,-9,-20,-26,-28,133,136,137,-19,-24,-25,-27,142,-23,-22,144,-21,]),';':([4,6,7,8,9,34,35,36,37,38,39,42,43,47,48,49,50,51,52,53,54,58,82,83,84,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,126,127,128,],[16,17,18,19,20,-44,-10,-31,-32,-33,-34,-62,-63,-11,-12,-13,-14,-15,-16,-17,-18,-64,-43,-61,-44,-29,-30,-52,-53,-54,-55,-56,-57,-58,-59,-38,-45,-46,-47,-48,-49,-50,-60,-39,-40,-41,-42,]),'=':([10,62,],[21,95,]),'DOTADDASSIGN':([10,],[22,]),'DOTSUBASSIGN':([10,],[23,]),'DOTMULASSIGN':([10,],[24,]),'DOTDIVASSIGN':([10,],[25,]),'ADDASSIGN':([10,],[26,]),'SUBASSIGN':([10,],[27,]),'MULASSIGN':([10,],[28,]),'DIVASSIGN':([10,],[29,]),'(':([11,12,13,14,21,22,23,24,25,26,27,28,29,30,31,32,33,40,41,44,45,46,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,95,],[30,31,32,33,41,41,41,41,41,41,41,41,41,41,59,41,41,41,41,87,88,89,59,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,59,]),'STRING':([21,22,23,24,25,26,27,28,29,33,],[39,39,39,39,39,39,39,39,39,39,]),'-':([21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,40,41,42,43,56,57,58,59,61,62,63,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,126,127,128,],[40,40,40,40,40,40,40,40,40,40,40,40,40,-44,68,-64,40,40,-62,-63,68,-44,-64,40,-64,-44,68,-44,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-43,-61,-44,68,-64,40,40,40,-64,68,-44,40,-52,-53,-54,-55,68,68,68,68,68,68,68,68,68,68,68,-60,-39,68,68,68,-64,-40,-41,-42,]),'INTEGER':([21,22,23,24,25,26,27,28,29,30,31,32,33,40,41,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,95,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'FLOAT':([21,22,23,24,25,26,27,28,29,30,31,32,33,40,41,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,95,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'ZEROS':([21,22,23,24,25,26,27,28,29,30,31,32,33,40,41,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,95,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'ONES':([21,22,23,24,25,26,27,28,29,30,31,32,33,40,41,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,95,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'EYE':([21,22,23,24,25,26,27,28,29,30,31,32,33,40,41,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,95,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'+':([34,36,37,42,43,56,57,58,61,62,63,65,82,83,84,85,86,91,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,126,127,128,],[-44,67,-64,-62,-63,67,-44,-64,-64,-44,67,-44,-43,-61,-44,67,-64,-64,67,-44,-52,-53,-54,-55,67,67,67,67,67,67,67,67,67,67,67,-60,-39,67,67,67,-64,-40,-41,-42,]),'*':([34,36,37,42,43,56,57,58,61,62,63,65,82,83,84,85,86,91,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,126,127,128,],[-44,69,-64,-62,-63,69,-44,-64,-64,-44,69,-44,-43,69,-44,69,-64,-64,69,-44,69,69,-54,-55,69,69,69,69,69,69,69,69,69,69,69,-60,-39,69,69,69,-64,-40,-41,-42,]),'/':([34,36,37,42,43,56,57,58,61,62,63,65,82,83,84,85,86,91,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,126,127,128,],[-44,70,-64,-62,-63,70,-44,-64,-64,-44,70,-44,-43,70,-44,70,-64,-64,70,-44,70,70,-54,-55,70,70,70,70,70,70,70,70,70,70,70,-60,-39,70,70,70,-64,-40,-41,-42,]),'DOTADD':([34,36,37,42,43,56,57,58,61,62,63,65,82,83,84,85,86,91,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,126,127,128,],[-44,71,-64,-62,-63,71,-44,-64,-64,-44,71,-44,-43,-61,-44,71,-64,-64,71,-44,-52,-53,-54,-55,71,71,71,71,71,71,71,71,71,71,71,-60,-39,71,71,71,-64,-40,-41,-42,]),'DOTSUB':([34,36,37,42,43,56,57,58,61,62,63,65,82,83,84,85,86,91,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,126,127,128,],[-44,72,-64,-62,-63,72,-44,-64,-64,-44,72,-44,-43,-61,-44,72,-64,-64,72,-44,-52,-53,-54,-55,72,72,72,72,72,72,72,72,72,72,72,-60,-39,72,72,72,-64,-40,-41,-42,]),'DOTMUL':([34,36,37,42,43,56,57,58,61,62,63,65,82,83,84,85,86,91,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,126,127,128,],[-44,73,-64,-62,-63,73,-44,-64,-64,-44,73,-44,-43,-61,-44,73,-64,-64,73,-44,-52,-53,-54,-55,73,73,73,73,73,73,73,73,73,73,73,-60,-39,73,73,73,-64,-40,-41,-42,]),'DOTDIV':([34,36,37,42,43,56,57,58,61,62,63,65,82,83,84,85,86,91,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,126,127,128,],[-44,74,-64,-62,-63,74,-44,-64,-64,-44,74,-44,-43,-61,-44,74,-64,-64,74,-44,-52,-53,-54,-55,74,74,74,74,74,74,74,74,74,74,74,-60,-39,74,74,74,-64,-40,-41,-42,]),':':([34,36,37,42,43,56,57,58,61,62,63,65,82,83,84,85,86,91,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,126,127,128,],[-44,75,-64,-62,-63,75,-44,-64,-64,-44,75,-44,-43,-61,-44,75,-64,-64,75,-44,-52,-53,-54,-55,75,75,75,75,75,75,75,75,75,75,75,-60,-39,75,75,75,-64,-40,-41,-42,]),'EQ':([34,36,37,42,43,56,57,58,65,82,83,84,99,100,101,102,103,104,105,106,107,114,115,126,127,128,],[-44,76,-64,-62,-63,76,-44,-64,-44,-43,-61,-44,-52,-53,-54,-55,-56,-57,-58,-59,-38,-60,-39,-40,-41,-42,]),'GEQ':([34,36,37,42,43,56,57,58,65,82,83,84,99,100,101,102,103,104,105,106,107,114,115,126,127,128,],[-44,77,-64,-62,-63,77,-44,-64,-44,-43,-61,-44,-52,-53,-54,-55,-56,-57,-58,-59,-38,-60,-39,-40,-41,-42,]),'LEQ':([34,36,37,42,43,56,57,58,65,82,83,84,99,100,101,102,103,104,105,106,107,114,115,126,127,128,],[-44,78,-64,-62,-63,78,-44,-64,-44,-43,-61,-44,-52,-53,-54,-55,-56,-57,-58,-59,-38,-60,-39,-40,-41,-42,]),'NEQ':([34,36,37,42,43,56,57,58,65,82,83,84,99,100,101,102,103,104,105,106,107,114,115,126,127,128,],[-44,79,-64,-62,-63,79,-44,-64,-44,-43,-61,-44,-52,-53,-54,-55,-56,-57,-58,-59,-38,-60,-39,-40,-41,-42,]),'>':([34,36,37,42,43,56,57,58,65,82,83,84,99,100,101,102,103,104,105,106,107,114,115,126,127,128,],[-44,80,-64,-62,-63,80,-44,-64,-44,-43,-61,-44,-52,-53,-54,-55,-56,-57,-58,-59,-38,-60,-39,-40,-41,-42,]),'<':([34,36,37,42,43,56,57,58,65,82,83,84,99,100,101,102,103,104,105,106,107,114,115,126,127,128,],[-44,81,-64,-62,-63,81,-44,-64,-44,-43,-61,-44,-52,-53,-54,-55,-56,-57,-58,-59,-38,-60,-39,-40,-41,-42,]),'TRANSPOSE':([34,37,42,43,57,58,61,62,65,82,83,84,86,91,93,99,100,101,102,103,104,105,106,107,114,115,123,126,127,128,],[-44,82,-62,-63,-44,82,82,-44,-44,-43,-61,-44,82,82,-44,-52,-53,-54,-55,-56,-57,-58,-59,-38,-60,-39,82,-40,-41,-42,]),')':([36,37,38,39,42,43,55,57,58,60,61,62,64,65,66,82,83,84,85,86,91,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,126,127,128,],[-31,-32,-33,-34,-62,-63,90,-51,-64,94,-35,-37,96,97,98,-43,-61,-44,114,115,115,114,-44,-52,-53,-54,-55,-56,-57,-58,-59,-38,-45,-46,-47,-48,-49,-50,-60,-39,126,127,128,-36,-40,-41,-42,]),'{':([90,94,96,130,138,],[119,121,124,135,140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,3,94,119,121,124,135,140,],[2,15,122,129,131,132,139,143,]),'instruction':([0,3,90,94,96,119,121,124,130,135,138,140,],[3,3,120,3,125,3,3,3,134,3,141,3,]),'assignment':([0,3,90,94,96,119,121,124,130,135,138,140,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'conditional':([0,3,90,94,96,119,121,124,130,135,138,140,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'prt':([0,3,90,94,96,119,121,124,130,135,138,140,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'rvalue':([21,22,23,24,25,26,27,28,29,33,],[35,47,48,49,50,51,52,53,54,66,]),'numexpr':([21,22,23,24,25,26,27,28,29,30,31,32,33,40,41,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,95,],[36,36,36,36,36,36,36,36,36,56,63,56,36,83,85,92,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,118,63,]),'matrix':([21,22,23,24,25,26,27,28,29,30,31,32,33,40,41,59,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,95,],[37,37,37,37,37,37,37,37,37,58,61,58,37,58,86,91,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,123,]),'logexpr':([21,22,23,24,25,26,27,28,29,30,32,33,],[38,38,38,38,38,38,38,38,38,55,64,38,]),'forexpr':([31,],[60,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','parser2.py',32),
  ('instructions -> instruction','instructions',1,'p_instructions','parser2.py',36),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','parser2.py',37),
  ('instruction -> assignment ;','instruction',2,'p_instruction','parser2.py',44),
  ('instruction -> conditional','instruction',1,'p_instruction','parser2.py',45),
  ('instruction -> BREAK ;','instruction',2,'p_instruction','parser2.py',46),
  ('instruction -> CONTINUE ;','instruction',2,'p_instruction','parser2.py',47),
  ('instruction -> RETURN ;','instruction',2,'p_instruction','parser2.py',48),
  ('instruction -> prt ;','instruction',2,'p_instruction','parser2.py',49),
  ('assignment -> ID = rvalue','assignment',3,'p_assignment','parser2.py',54),
  ('assignment -> ID DOTADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',55),
  ('assignment -> ID DOTSUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',56),
  ('assignment -> ID DOTMULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',57),
  ('assignment -> ID DOTDIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',58),
  ('assignment -> ID ADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',59),
  ('assignment -> ID SUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',60),
  ('assignment -> ID MULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',61),
  ('assignment -> ID DIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',62),
  ('conditional -> IF ( logexpr ) { instructions }','conditional',7,'p_conditional','parser2.py',86),
  ('conditional -> IF ( logexpr ) instruction','conditional',5,'p_conditional','parser2.py',87),
  ('conditional -> IF ( logexpr ) { instructions } ELSE { instructions }','conditional',11,'p_conditional','parser2.py',88),
  ('conditional -> IF ( logexpr ) instruction ELSE { instructions }','conditional',9,'p_conditional','parser2.py',89),
  ('conditional -> IF ( logexpr ) { instructions } ELSE instruction','conditional',9,'p_conditional','parser2.py',90),
  ('conditional -> IF ( logexpr ) instruction ELSE instruction','conditional',7,'p_conditional','parser2.py',91),
  ('conditional -> FOR ( forexpr ) { instructions }','conditional',7,'p_conditional','parser2.py',92),
  ('conditional -> FOR ( forexpr ) instructions','conditional',5,'p_conditional','parser2.py',93),
  ('conditional -> WHILE ( logexpr ) { instructions }','conditional',7,'p_conditional','parser2.py',94),
  ('conditional -> WHILE ( logexpr ) instruction','conditional',5,'p_conditional','parser2.py',95),
  ('prt -> PRINT ( ID )','prt',4,'p_prt','parser2.py',98),
  ('prt -> PRINT ( rvalue )','prt',4,'p_prt','parser2.py',99),
  ('rvalue -> numexpr','rvalue',1,'p_rvalue','parser2.py',102),
  ('rvalue -> matrix','rvalue',1,'p_rvalue','parser2.py',103),
  ('rvalue -> logexpr','rvalue',1,'p_rvalue','parser2.py',104),
  ('rvalue -> STRING','rvalue',1,'p_rvalue','parser2.py',105),
  ('forexpr -> matrix','forexpr',1,'p_forexpr','parser2.py',109),
  ('forexpr -> ID = matrix','forexpr',3,'p_forexpr','parser2.py',110),
  ('forexpr -> ID','forexpr',1,'p_forexpr','parser2.py',111),
  ('matrix -> numexpr : numexpr','matrix',3,'p_matrix','parser2.py',114),
  ('matrix -> ( matrix )','matrix',3,'p_matrix','parser2.py',115),
  ('matrix -> ZEROS ( numexpr )','matrix',4,'p_matrix','parser2.py',116),
  ('matrix -> ONES ( numexpr )','matrix',4,'p_matrix','parser2.py',117),
  ('matrix -> EYE ( numexpr )','matrix',4,'p_matrix','parser2.py',118),
  ('matrix -> matrix TRANSPOSE','matrix',2,'p_matrix','parser2.py',119),
  ('matrix -> ID','matrix',1,'p_matrix','parser2.py',120),
  ('logexpr -> numexpr EQ numexpr','logexpr',3,'p_logexpr','parser2.py',123),
  ('logexpr -> numexpr GEQ numexpr','logexpr',3,'p_logexpr','parser2.py',124),
  ('logexpr -> numexpr LEQ numexpr','logexpr',3,'p_logexpr','parser2.py',125),
  ('logexpr -> numexpr NEQ numexpr','logexpr',3,'p_logexpr','parser2.py',126),
  ('logexpr -> numexpr > numexpr','logexpr',3,'p_logexpr','parser2.py',127),
  ('logexpr -> numexpr < numexpr','logexpr',3,'p_logexpr','parser2.py',128),
  ('logexpr -> ID','logexpr',1,'p_logexpr','parser2.py',129),
  ('numexpr -> numexpr + numexpr','numexpr',3,'p_numexpr','parser2.py',147),
  ('numexpr -> numexpr - numexpr','numexpr',3,'p_numexpr','parser2.py',148),
  ('numexpr -> numexpr * numexpr','numexpr',3,'p_numexpr','parser2.py',149),
  ('numexpr -> numexpr / numexpr','numexpr',3,'p_numexpr','parser2.py',150),
  ('numexpr -> numexpr DOTADD numexpr','numexpr',3,'p_numexpr','parser2.py',151),
  ('numexpr -> numexpr DOTSUB numexpr','numexpr',3,'p_numexpr','parser2.py',152),
  ('numexpr -> numexpr DOTMUL numexpr','numexpr',3,'p_numexpr','parser2.py',153),
  ('numexpr -> numexpr DOTDIV numexpr','numexpr',3,'p_numexpr','parser2.py',154),
  ('numexpr -> ( numexpr )','numexpr',3,'p_numexpr','parser2.py',155),
  ('numexpr -> - numexpr','numexpr',2,'p_numexpr','parser2.py',156),
  ('numexpr -> INTEGER','numexpr',1,'p_numexpr','parser2.py',157),
  ('numexpr -> FLOAT','numexpr',1,'p_numexpr','parser2.py',158),
  ('numexpr -> matrix','numexpr',1,'p_numexpr','parser2.py',159),
  ('numexpr -> ID','numexpr',1,'p_numexpr','parser2.py',160),
]
