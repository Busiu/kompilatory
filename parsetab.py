
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftIFleftELSEleft:,left=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNDOTADDASSIGNDOTSUBASSIGNDOTMULASSIGNDOTDIVASSIGNleft<>EQLEQGEQNEQleftUMINUSleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVleftTRANSPOSEADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTADDASSIGN DOTDIV DOTDIVASSIGN DOTMUL DOTMULASSIGN DOTSUB DOTSUBASSIGN ELSE EQ EYE FLOAT FOR GEQ ID IF INTEGER LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN TRANSPOSE WHILE ZEROSprogram : instructionsinstructions : instruction instructions\n                        | instruction\n                        | '{' instructions '}'instruction  : assignment ';'\n                        | conditional\n                        | BREAK ';'\n                        | CONTINUE ';'\n                        | RETURN rvalue ';'\n                        | RETURN ';'\n                        | PRINT '(' prtvalues ')' ';' assignment   : ID '=' rvalue\n                        | ID DOTADDASSIGN rvalue\n                        | ID DOTSUBASSIGN rvalue\n                        | ID DOTMULASSIGN rvalue\n                        | ID DOTDIVASSIGN rvalue\n                        | ID ADDASSIGN rvalue\n                        | ID SUBASSIGN rvalue\n                        | ID MULASSIGN rvalue\n                        | ID DIVASSIGN rvaluematrixelem   : ID '[' expr ',' expr ']'conditional  : IF '(' expr ')' block %prec IF\n                        | IF '(' expr ')' block ELSE block\n                        | FOR '(' forexpr ')' block\n                        | WHILE '(' expr ')' blockblock : instruction\n                 | '{' instructions '}' prtvalues    : rvalue ',' prtvalues\n                        | rvaluervalue   : expr\n                    | matrixelem\n                    | strstr      : STRINGforexpr  : ID '=' expr ':' exprrows : rowelems ';' rows\n                | rowelemsrowelems : rvalue ',' rowelems\n                    | rvalueexpr : expr '+' expr\n                | expr '-' expr\n                | expr '*' expr\n                | expr '/' expr\n                | '-' expr %prec UMINUS\n                | expr DOTADD expr\n                | expr DOTSUB expr\n                | expr DOTMUL expr\n                | expr DOTDIV expr\n                | expr EQ expr\n                | expr GEQ expr\n                | expr LEQ expr\n                | expr NEQ expr\n                | expr '>' expr\n                | expr '<' expr\n                | '[' rows ']'\n                | '(' expr ')'\n                | ZEROS '(' expr ')'\n                | ONES '(' expr ')'\n                | EYE '(' expr ')'\n                | expr TRANSPOSE\n                | INTEGER\n                | FLOAT\n                | ID"
    
_lr_action_items = {'{':([0,3,4,6,17,18,19,21,49,114,115,117,124,126,127,128,129,131,133,137,138,],[4,4,4,-6,-5,-7,-8,-10,-9,128,128,128,-11,-22,-26,4,-24,-25,128,-23,-27,]),'BREAK':([0,3,4,6,17,18,19,21,49,114,115,117,124,126,127,128,129,131,133,137,138,],[7,7,7,-6,-5,-7,-8,-10,-9,7,7,7,-11,-22,-26,7,-24,-25,7,-23,-27,]),'CONTINUE':([0,3,4,6,17,18,19,21,49,114,115,117,124,126,127,128,129,131,133,137,138,],[8,8,8,-6,-5,-7,-8,-10,-9,8,8,8,-11,-22,-26,8,-24,-25,8,-23,-27,]),'RETURN':([0,3,4,6,17,18,19,21,49,114,115,117,124,126,127,128,129,131,133,137,138,],[9,9,9,-6,-5,-7,-8,-10,-9,9,9,9,-11,-22,-26,9,-24,-25,9,-23,-27,]),'PRINT':([0,3,4,6,17,18,19,21,49,114,115,117,124,126,127,128,129,131,133,137,138,],[10,10,10,-6,-5,-7,-8,-10,-9,10,10,10,-11,-22,-26,10,-24,-25,10,-23,-27,]),'ID':([0,3,4,6,9,17,18,19,21,25,26,27,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,105,106,113,114,115,116,117,123,124,126,127,128,129,131,133,135,137,138,],[11,11,11,-6,33,-5,-7,-8,-10,66,33,66,33,33,33,33,33,33,33,33,33,33,66,88,66,-9,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,33,33,33,11,11,66,11,66,-11,-22,-26,11,-24,-25,11,66,-23,-27,]),'IF':([0,3,4,6,17,18,19,21,49,114,115,117,124,126,127,128,129,131,133,137,138,],[12,12,12,-6,-5,-7,-8,-10,-9,12,12,12,-11,-22,-26,12,-24,-25,12,-23,-27,]),'FOR':([0,3,4,6,17,18,19,21,49,114,115,117,124,126,127,128,129,131,133,137,138,],[13,13,13,-6,-5,-7,-8,-10,-9,13,13,13,-11,-22,-26,13,-24,-25,13,-23,-27,]),'WHILE':([0,3,4,6,17,18,19,21,49,114,115,117,124,126,127,128,129,131,133,137,138,],[14,14,14,-6,-5,-7,-8,-10,-9,14,14,14,-11,-22,-26,14,-24,-25,14,-23,-27,]),'$end':([1,2,3,6,15,17,18,19,21,48,49,124,126,127,129,131,137,138,],[0,-1,-3,-6,-2,-5,-7,-8,-10,-4,-9,-11,-22,-26,-24,-25,-23,-27,]),'}':([3,6,15,16,17,18,19,21,48,49,124,126,127,129,131,134,137,138,],[-3,-6,-2,48,-5,-7,-8,-10,-4,-9,-11,-22,-26,-24,-25,138,-23,-27,]),';':([5,7,8,9,20,22,23,24,31,32,33,34,64,65,66,68,69,77,78,79,80,81,82,83,84,85,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,112,119,120,121,122,136,],[17,18,19,21,49,-30,-31,-32,-60,-61,-62,-33,-59,-43,-62,105,-38,-12,-13,-14,-15,-16,-17,-18,-19,-20,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,124,-37,-56,-57,-58,-21,]),'ELSE':([6,17,18,19,21,49,124,126,127,129,131,137,138,],[-6,-5,-7,-8,-10,-9,-11,133,-26,-24,-25,-23,-27,]),'-':([9,22,25,26,27,31,32,33,35,36,37,38,39,40,41,42,43,44,45,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,74,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,120,121,122,123,130,132,135,139,],[25,51,25,25,25,-60,-61,-62,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-59,51,-62,51,25,25,25,25,51,51,-39,-40,-41,-42,-44,-45,-46,-47,51,51,51,51,51,51,-54,25,25,-55,51,51,51,51,25,25,-56,-57,-58,25,51,51,25,51,]),'[':([9,25,26,27,33,35,36,37,38,39,40,41,42,43,44,45,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,105,106,113,116,123,135,],[26,26,26,26,74,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'(':([9,10,12,13,14,25,26,27,28,29,30,35,36,37,38,39,40,41,42,43,44,45,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,105,106,113,116,123,135,],[27,35,45,46,47,27,27,27,71,72,73,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'ZEROS':([9,25,26,27,35,36,37,38,39,40,41,42,43,44,45,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,105,106,113,116,123,135,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'ONES':([9,25,26,27,35,36,37,38,39,40,41,42,43,44,45,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,105,106,113,116,123,135,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'EYE':([9,25,26,27,35,36,37,38,39,40,41,42,43,44,45,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,105,106,113,116,123,135,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'INTEGER':([9,25,26,27,35,36,37,38,39,40,41,42,43,44,45,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,105,106,113,116,123,135,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'FLOAT':([9,25,26,27,35,36,37,38,39,40,41,42,43,44,45,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,105,106,113,116,123,135,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'STRING':([9,26,35,36,37,38,39,40,41,42,43,44,105,106,113,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'=':([11,88,],[36,116,]),'DOTADDASSIGN':([11,],[37,]),'DOTSUBASSIGN':([11,],[38,]),'DOTMULASSIGN':([11,],[39,]),'DOTDIVASSIGN':([11,],[40,]),'ADDASSIGN':([11,],[41,]),'SUBASSIGN':([11,],[42,]),'MULASSIGN':([11,],[43,]),'DIVASSIGN':([11,],[44,]),',':([22,23,24,31,32,33,34,64,65,66,69,76,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,111,120,121,122,136,],[-30,-31,-32,-60,-61,-62,-33,-59,-43,-62,106,113,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,123,-56,-57,-58,-21,]),']':([22,23,24,31,32,33,34,64,65,66,67,68,69,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,118,119,120,121,122,132,136,],[-30,-31,-32,-60,-61,-62,-33,-59,-43,-62,104,-36,-38,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-35,-37,-56,-57,-58,136,-21,]),')':([22,23,24,31,32,33,34,64,65,66,70,75,76,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,120,121,122,125,136,139,],[-30,-31,-32,-60,-61,-62,-33,-59,-43,-62,107,112,-29,114,115,117,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,120,121,122,-56,-57,-58,-28,-21,-34,]),'+':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[50,-60,-61,-62,-59,50,-62,50,50,50,-39,-40,-41,-42,-44,-45,-46,-47,50,50,50,50,50,50,-54,-55,50,50,50,50,-56,-57,-58,50,50,50,]),'*':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[52,-60,-61,-62,-59,52,-62,52,52,52,52,52,-41,-42,52,52,-46,-47,52,52,52,52,52,52,-54,-55,52,52,52,52,-56,-57,-58,52,52,52,]),'/':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[53,-60,-61,-62,-59,53,-62,53,53,53,53,53,-41,-42,53,53,-46,-47,53,53,53,53,53,53,-54,-55,53,53,53,53,-56,-57,-58,53,53,53,]),'DOTADD':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[54,-60,-61,-62,-59,54,-62,54,54,54,-39,-40,-41,-42,-44,-45,-46,-47,54,54,54,54,54,54,-54,-55,54,54,54,54,-56,-57,-58,54,54,54,]),'DOTSUB':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[55,-60,-61,-62,-59,55,-62,55,55,55,-39,-40,-41,-42,-44,-45,-46,-47,55,55,55,55,55,55,-54,-55,55,55,55,55,-56,-57,-58,55,55,55,]),'DOTMUL':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[56,-60,-61,-62,-59,56,-62,56,56,56,56,56,-41,-42,56,56,-46,-47,56,56,56,56,56,56,-54,-55,56,56,56,56,-56,-57,-58,56,56,56,]),'DOTDIV':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[57,-60,-61,-62,-59,57,-62,57,57,57,57,57,-41,-42,57,57,-46,-47,57,57,57,57,57,57,-54,-55,57,57,57,57,-56,-57,-58,57,57,57,]),'EQ':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[58,-60,-61,-62,-59,-43,-62,58,58,58,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,58,58,58,58,-56,-57,-58,58,58,58,]),'GEQ':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[59,-60,-61,-62,-59,-43,-62,59,59,59,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,59,59,59,59,-56,-57,-58,59,59,59,]),'LEQ':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[60,-60,-61,-62,-59,-43,-62,60,60,60,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,60,60,60,60,-56,-57,-58,60,60,60,]),'NEQ':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[61,-60,-61,-62,-59,-43,-62,61,61,61,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,61,61,61,61,-56,-57,-58,61,61,61,]),'>':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[62,-60,-61,-62,-59,-43,-62,62,62,62,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,62,62,62,62,-56,-57,-58,62,62,62,]),'<':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[63,-60,-61,-62,-59,-43,-62,63,63,63,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,63,63,63,63,-56,-57,-58,63,63,63,]),'TRANSPOSE':([22,31,32,33,64,65,66,70,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,120,121,122,130,132,139,],[64,-60,-61,-62,-59,64,-62,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-54,-55,64,64,64,64,-56,-57,-58,64,64,64,]),':':([31,32,64,65,66,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,120,121,122,130,],[-60,-61,-59,-43,-62,-39,-40,-41,-42,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,135,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,3,4,128,],[2,15,16,134,]),'instruction':([0,3,4,114,115,117,128,133,],[3,3,3,127,127,127,3,127,]),'assignment':([0,3,4,114,115,117,128,133,],[5,5,5,5,5,5,5,5,]),'conditional':([0,3,4,114,115,117,128,133,],[6,6,6,6,6,6,6,6,]),'rvalue':([9,26,35,36,37,38,39,40,41,42,43,44,105,106,113,],[20,69,76,77,78,79,80,81,82,83,84,85,69,69,76,]),'expr':([9,25,26,27,35,36,37,38,39,40,41,42,43,44,45,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,105,106,113,116,123,135,],[22,65,22,70,22,22,22,22,22,22,22,22,22,22,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,108,109,110,111,22,22,22,130,132,139,]),'matrixelem':([9,26,35,36,37,38,39,40,41,42,43,44,105,106,113,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'str':([9,26,35,36,37,38,39,40,41,42,43,44,105,106,113,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'rows':([26,105,],[67,118,]),'rowelems':([26,105,106,],[68,68,119,]),'prtvalues':([35,113,],[75,125,]),'forexpr':([46,],[87,]),'block':([114,115,117,133,],[126,129,131,137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','parser2.py',41),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','parser2.py',45),
  ('instructions -> instruction','instructions',1,'p_instructions','parser2.py',46),
  ('instructions -> { instructions }','instructions',3,'p_instructions','parser2.py',47),
  ('instruction -> assignment ;','instruction',2,'p_instruction','parser2.py',57),
  ('instruction -> conditional','instruction',1,'p_instruction','parser2.py',58),
  ('instruction -> BREAK ;','instruction',2,'p_instruction','parser2.py',59),
  ('instruction -> CONTINUE ;','instruction',2,'p_instruction','parser2.py',60),
  ('instruction -> RETURN rvalue ;','instruction',3,'p_instruction','parser2.py',61),
  ('instruction -> RETURN ;','instruction',2,'p_instruction','parser2.py',62),
  ('instruction -> PRINT ( prtvalues ) ;','instruction',5,'p_instruction','parser2.py',63),
  ('assignment -> ID = rvalue','assignment',3,'p_assignment','parser2.py',72),
  ('assignment -> ID DOTADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',73),
  ('assignment -> ID DOTSUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',74),
  ('assignment -> ID DOTMULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',75),
  ('assignment -> ID DOTDIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',76),
  ('assignment -> ID ADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',77),
  ('assignment -> ID SUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',78),
  ('assignment -> ID MULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',79),
  ('assignment -> ID DIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',80),
  ('matrixelem -> ID [ expr , expr ]','matrixelem',6,'p_matrixelem','parser2.py',84),
  ('conditional -> IF ( expr ) block','conditional',5,'p_conditional','parser2.py',88),
  ('conditional -> IF ( expr ) block ELSE block','conditional',7,'p_conditional','parser2.py',89),
  ('conditional -> FOR ( forexpr ) block','conditional',5,'p_conditional','parser2.py',90),
  ('conditional -> WHILE ( expr ) block','conditional',5,'p_conditional','parser2.py',91),
  ('block -> instruction','block',1,'p_block','parser2.py',98),
  ('block -> { instructions }','block',3,'p_block','parser2.py',99),
  ('prtvalues -> rvalue , prtvalues','prtvalues',3,'p_prtvalues','parser2.py',106),
  ('prtvalues -> rvalue','prtvalues',1,'p_prtvalues','parser2.py',107),
  ('rvalue -> expr','rvalue',1,'p_rvalue','parser2.py',114),
  ('rvalue -> matrixelem','rvalue',1,'p_rvalue','parser2.py',115),
  ('rvalue -> str','rvalue',1,'p_rvalue','parser2.py',116),
  ('str -> STRING','str',1,'p_str','parser2.py',120),
  ('forexpr -> ID = expr : expr','forexpr',5,'p_forexpr','parser2.py',124),
  ('rows -> rowelems ; rows','rows',3,'p_rows','parser2.py',128),
  ('rows -> rowelems','rows',1,'p_rows','parser2.py',129),
  ('rowelems -> rvalue , rowelems','rowelems',3,'p_rowelems','parser2.py',136),
  ('rowelems -> rvalue','rowelems',1,'p_rowelems','parser2.py',137),
  ('expr -> expr + expr','expr',3,'p_expr','parser2.py',144),
  ('expr -> expr - expr','expr',3,'p_expr','parser2.py',145),
  ('expr -> expr * expr','expr',3,'p_expr','parser2.py',146),
  ('expr -> expr / expr','expr',3,'p_expr','parser2.py',147),
  ('expr -> - expr','expr',2,'p_expr','parser2.py',148),
  ('expr -> expr DOTADD expr','expr',3,'p_expr','parser2.py',149),
  ('expr -> expr DOTSUB expr','expr',3,'p_expr','parser2.py',150),
  ('expr -> expr DOTMUL expr','expr',3,'p_expr','parser2.py',151),
  ('expr -> expr DOTDIV expr','expr',3,'p_expr','parser2.py',152),
  ('expr -> expr EQ expr','expr',3,'p_expr','parser2.py',153),
  ('expr -> expr GEQ expr','expr',3,'p_expr','parser2.py',154),
  ('expr -> expr LEQ expr','expr',3,'p_expr','parser2.py',155),
  ('expr -> expr NEQ expr','expr',3,'p_expr','parser2.py',156),
  ('expr -> expr > expr','expr',3,'p_expr','parser2.py',157),
  ('expr -> expr < expr','expr',3,'p_expr','parser2.py',158),
  ('expr -> [ rows ]','expr',3,'p_expr','parser2.py',159),
  ('expr -> ( expr )','expr',3,'p_expr','parser2.py',160),
  ('expr -> ZEROS ( expr )','expr',4,'p_expr','parser2.py',161),
  ('expr -> ONES ( expr )','expr',4,'p_expr','parser2.py',162),
  ('expr -> EYE ( expr )','expr',4,'p_expr','parser2.py',163),
  ('expr -> expr TRANSPOSE','expr',2,'p_expr','parser2.py',164),
  ('expr -> INTEGER','expr',1,'p_expr','parser2.py',165),
  ('expr -> FLOAT','expr',1,'p_expr','parser2.py',166),
  ('expr -> ID','expr',1,'p_expr','parser2.py',167),
]
