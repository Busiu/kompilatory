
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left<>EQLEQGEQNEQleft=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNDOTADDASSIGNDOTSUBASSIGNDOTMULASSIGNDOTDIVASSIGNleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVleftTRANSPOSEleft[](left{}BREAKCONTINUERETURNPRINTWHILEFORONESZEROSEYEIFELSEleft;,ADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTADDASSIGN DOTDIV DOTDIVASSIGN DOTMUL DOTMULASSIGN DOTSUB DOTSUBASSIGN ELSE EQ EYE FLOAT FOR GEQ ID IF INTEGER LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN TRANSPOSE WHILE ZEROSprogram : instructionsinstructions : instruction instructions\n                        | instruction\n                        | '{' instructions '}'instruction  : assignment ';'\n                        | conditional\n                        | BREAK ';'\n                        | CONTINUE ';'\n                        | RETURN rvalue ';'\n                        | RETURN ';'\n                        | PRINT '(' prtvalues ')' ';' assignment   : variable '=' rvalue\n                        | variable DOTADDASSIGN rvalue\n                        | variable DOTSUBASSIGN rvalue\n                        | variable DOTMULASSIGN rvalue\n                        | variable DOTDIVASSIGN rvalue\n                        | variable ADDASSIGN rvalue\n                        | variable SUBASSIGN rvalue\n                        | variable MULASSIGN rvalue\n                        | variable DIVASSIGN rvaluevariable : ID\n                    | matrixelemmatrixelem   : ID '[' numexpr ',' numexpr ']'conditional  : IF '(' cond ')' block\n                        | IF '(' cond ')' block ELSE block\n                        | FOR '(' forexpr ')' block\n                        | WHILE '(' cond ')' blockcond : logexpr\n                | IDblock : instruction\n                 | '{' instructions '}' prtvalues    : rvalue ',' prtvalues\n                        | rvaluervalue   : numexpr\n                    | matrixelem\n                    | matrix\n                    | logexpr\n                    | STRING\n                    | IDforexpr  : ID '=' matrixmatrix   : numexpr ':' numexpr\n                    | '[' rows ']'\n                    | '(' matrix ')'\n                    | ZEROS '(' numexpr ')'\n                    | ONES '(' numexpr ')'\n                    | EYE '(' numexpr ')'\n                    | matrix TRANSPOSE\n                    | IDrows : rowelems ';' rows\n                | rowelemsrowelems : rvalue ',' rowelems\n                    | rvaluelogexpr  : numexpr EQ numexpr\n                    | numexpr GEQ numexpr\n                    | numexpr LEQ numexpr\n                    | numexpr NEQ numexpr\n                    | numexpr '>' numexpr\n                    | numexpr '<' numexprnumexpr  : numexpr '+' numexpr\n                    | numexpr '-' numexpr\n                    | numexpr '*' numexpr\n                    | numexpr '/' numexpr\n                    | numexpr DOTADD numexpr\n                    | numexpr DOTSUB numexpr\n                    | numexpr DOTMUL numexpr\n                    | numexpr DOTDIV numexpr\n                    | '(' numexpr ')'\n                    | '-' numexpr\n                    | ID\n                    | INTEGER\n                    | FLOAT\n                    | matrix"
    
_lr_action_items = {'{':([0,3,4,6,19,20,21,23,53,125,126,128,135,137,138,139,140,145,147,152,153,],[4,4,4,-6,-5,-7,-8,-10,-9,139,139,139,-11,-24,-30,4,-26,-27,139,-25,-31,]),'BREAK':([0,3,4,6,19,20,21,23,53,125,126,128,135,137,138,139,140,145,147,152,153,],[7,7,7,-6,-5,-7,-8,-10,-9,7,7,7,-11,-24,-30,7,-26,-27,7,-25,-31,]),'CONTINUE':([0,3,4,6,19,20,21,23,53,125,126,128,135,137,138,139,140,145,147,152,153,],[8,8,8,-6,-5,-7,-8,-10,-9,8,8,8,-11,-24,-30,8,-26,-27,8,-25,-31,]),'RETURN':([0,3,4,6,19,20,21,23,53,125,126,128,135,137,138,139,140,145,147,152,153,],[9,9,9,-6,-5,-7,-8,-10,-9,9,9,9,-11,-24,-30,9,-26,-27,9,-25,-31,]),'PRINT':([0,3,4,6,19,20,21,23,53,125,126,128,135,137,138,139,140,145,147,152,153,],[10,10,10,-6,-5,-7,-8,-10,-9,10,10,10,-11,-24,-30,10,-26,-27,10,-25,-31,]),'IF':([0,3,4,6,19,20,21,23,53,125,126,128,135,137,138,139,140,145,147,152,153,],[12,12,12,-6,-5,-7,-8,-10,-9,12,12,12,-11,-24,-30,12,-26,-27,12,-25,-31,]),'FOR':([0,3,4,6,19,20,21,23,53,125,126,128,135,137,138,139,140,145,147,152,153,],[13,13,13,-6,-5,-7,-8,-10,-9,13,13,13,-11,-24,-30,13,-26,-27,13,-25,-31,]),'WHILE':([0,3,4,6,19,20,21,23,53,125,126,128,135,137,138,139,140,145,147,152,153,],[14,14,14,-6,-5,-7,-8,-10,-9,14,14,14,-11,-24,-30,14,-26,-27,14,-25,-31,]),'ID':([0,3,4,6,9,19,20,21,23,30,31,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,118,119,124,125,126,127,128,129,135,137,138,139,140,144,145,147,152,153,],[15,15,15,-6,29,-5,-7,-8,-10,71,71,29,29,29,29,29,29,29,29,29,29,29,94,97,94,71,-9,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,29,29,29,15,15,141,15,71,-11,-24,-30,15,-26,141,-27,15,-25,-31,]),'$end':([1,2,3,6,17,19,20,21,23,52,53,135,137,138,140,145,152,153,],[0,-1,-3,-6,-2,-5,-7,-8,-10,-4,-9,-11,-24,-30,-26,-27,-25,-31,]),'}':([3,6,17,18,19,20,21,23,52,53,135,137,138,140,145,148,152,153,],[-3,-6,-2,52,-5,-7,-8,-10,-4,-9,-11,-24,-30,-26,-27,153,-25,-31,]),';':([5,7,8,9,22,24,25,26,27,28,29,32,33,69,70,71,72,76,77,83,84,85,86,87,88,89,90,91,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,123,131,132,133,134,151,],[19,20,21,23,53,-34,-35,-36,-37,-38,-39,-70,-71,-47,-68,-48,-72,118,-52,-12,-13,-14,-15,-16,-17,-18,-19,-20,-59,-60,-61,-62,-63,-64,-65,-66,-41,-53,-54,-55,-56,-57,-58,-67,-43,-42,135,-51,-44,-45,-46,-23,]),'ELSE':([6,19,20,21,23,53,135,137,138,140,145,152,153,],[-6,-5,-7,-8,-10,-9,-11,147,-30,-26,-27,-25,-31,]),'STRING':([9,34,38,39,40,41,42,43,44,45,46,47,118,119,124,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'(':([9,10,12,13,14,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,118,119,124,127,129,144,],[31,38,48,49,50,31,31,31,78,79,80,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,144,31,144,]),'-':([9,24,26,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,48,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,79,80,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,127,129,132,133,134,141,142,143,144,146,149,150,],[30,55,-72,-48,30,30,-70,-71,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-47,-68,-48,-72,55,-72,30,30,30,-48,55,55,-59,-60,-61,-62,-63,-64,-65,-66,55,55,55,55,55,55,55,-67,-43,-42,30,30,55,55,55,30,30,30,-44,-45,-46,-48,-72,55,30,55,-72,55,]),'INTEGER':([9,30,31,34,38,39,40,41,42,43,44,45,46,47,48,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,118,119,124,127,129,144,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FLOAT':([9,30,31,34,38,39,40,41,42,43,44,45,46,47,48,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,118,119,124,127,129,144,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'[':([9,15,29,30,31,34,38,39,40,41,42,43,44,45,46,47,48,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,118,119,124,127,129,144,],[34,51,51,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'ZEROS':([9,30,31,34,38,39,40,41,42,43,44,45,46,47,48,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,118,119,124,127,129,144,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'ONES':([9,30,31,34,38,39,40,41,42,43,44,45,46,47,48,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,118,119,124,127,129,144,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'EYE':([9,30,31,34,38,39,40,41,42,43,44,45,46,47,48,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,118,119,124,127,129,144,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'=':([11,15,16,97,151,],[39,-21,-22,127,-23,]),'DOTADDASSIGN':([11,15,16,151,],[40,-21,-22,-23,]),'DOTSUBASSIGN':([11,15,16,151,],[41,-21,-22,-23,]),'DOTMULASSIGN':([11,15,16,151,],[42,-21,-22,-23,]),'DOTDIVASSIGN':([11,15,16,151,],[43,-21,-22,-23,]),'ADDASSIGN':([11,15,16,151,],[44,-21,-22,-23,]),'SUBASSIGN':([11,15,16,151,],[45,-21,-22,-23,]),'MULASSIGN':([11,15,16,151,],[46,-21,-22,-23,]),'DIVASSIGN':([11,15,16,151,],[47,-21,-22,-23,]),',':([24,25,26,27,28,29,32,33,69,70,71,72,77,82,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,132,133,134,151,],[-34,-35,-36,-37,-38,-39,-70,-71,-47,-68,-48,-72,119,124,129,-59,-60,-61,-62,-63,-64,-65,-66,-41,-53,-54,-55,-56,-57,-58,-67,-43,-42,-44,-45,-46,-23,]),']':([24,25,26,27,28,29,32,33,69,70,71,72,75,76,77,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,130,131,132,133,134,146,151,],[-34,-35,-36,-37,-38,-39,-70,-71,-47,-68,-48,-72,117,-50,-52,-59,-60,-61,-62,-63,-64,-65,-66,-41,-53,-54,-55,-56,-57,-58,-67,-43,-42,-49,-51,-44,-45,-46,151,-23,]),')':([24,25,26,27,28,29,32,33,69,70,71,72,73,74,81,82,92,93,94,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,132,133,134,136,141,142,149,150,151,],[-34,-35,-36,-37,-38,-39,-70,-71,-47,-68,-48,-72,115,116,123,-33,125,-28,-29,126,128,-59,-60,-61,-62,-63,-64,-65,-66,-41,-53,-54,-55,-56,-57,-58,-67,-43,-42,132,133,134,-44,-45,-46,-32,-48,-40,116,115,-23,]),'+':([24,26,29,32,33,69,70,71,72,73,74,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,132,133,134,141,142,143,146,149,150,],[54,-72,-48,-70,-71,-47,-68,-48,-72,54,-72,-48,54,54,-59,-60,-61,-62,-63,-64,-65,-66,54,54,54,54,54,54,54,-67,-43,-42,54,54,54,-44,-45,-46,-48,-72,54,54,-72,54,]),'*':([24,26,29,32,33,69,70,71,72,73,74,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,132,133,134,141,142,143,146,149,150,],[56,-72,-48,-70,-71,-47,56,-48,-72,56,-72,-48,56,56,56,56,-61,-62,56,56,-65,-66,56,56,56,56,56,56,56,-67,-43,-42,56,56,56,-44,-45,-46,-48,-72,56,56,-72,56,]),'/':([24,26,29,32,33,69,70,71,72,73,74,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,132,133,134,141,142,143,146,149,150,],[57,-72,-48,-70,-71,-47,57,-48,-72,57,-72,-48,57,57,57,57,-61,-62,57,57,-65,-66,57,57,57,57,57,57,57,-67,-43,-42,57,57,57,-44,-45,-46,-48,-72,57,57,-72,57,]),'DOTADD':([24,26,29,32,33,69,70,71,72,73,74,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,132,133,134,141,142,143,146,149,150,],[58,-72,-48,-70,-71,-47,-68,-48,-72,58,-72,-48,58,58,-59,-60,-61,-62,-63,-64,-65,-66,58,58,58,58,58,58,58,-67,-43,-42,58,58,58,-44,-45,-46,-48,-72,58,58,-72,58,]),'DOTSUB':([24,26,29,32,33,69,70,71,72,73,74,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,132,133,134,141,142,143,146,149,150,],[59,-72,-48,-70,-71,-47,-68,-48,-72,59,-72,-48,59,59,-59,-60,-61,-62,-63,-64,-65,-66,59,59,59,59,59,59,59,-67,-43,-42,59,59,59,-44,-45,-46,-48,-72,59,59,-72,59,]),'DOTMUL':([24,26,29,32,33,69,70,71,72,73,74,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,132,133,134,141,142,143,146,149,150,],[60,-72,-48,-70,-71,-47,60,-48,-72,60,-72,-48,60,60,60,60,-61,-62,60,60,-65,-66,60,60,60,60,60,60,60,-67,-43,-42,60,60,60,-44,-45,-46,-48,-72,60,60,-72,60,]),'DOTDIV':([24,26,29,32,33,69,70,71,72,73,74,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,132,133,134,141,142,143,146,149,150,],[61,-72,-48,-70,-71,-47,61,-48,-72,61,-72,-48,61,61,61,61,-61,-62,61,61,-65,-66,61,61,61,61,61,61,61,-67,-43,-42,61,61,61,-44,-45,-46,-48,-72,61,61,-72,61,]),':':([24,26,29,32,33,69,70,71,72,73,74,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,132,133,134,141,142,143,146,149,150,],[62,-72,-48,-70,-71,-47,-68,-48,-72,62,-72,-48,62,62,-59,-60,-61,-62,-63,-64,-65,-66,62,62,62,62,62,62,62,-67,-43,-42,62,62,62,-44,-45,-46,-48,-72,62,62,-72,62,]),'EQ':([24,26,29,32,33,69,70,71,72,94,95,100,101,102,103,104,105,106,107,108,115,116,117,132,133,134,],[63,-72,-48,-70,-71,-47,-68,-48,-72,-48,63,-59,-60,-61,-62,-63,-64,-65,-66,-41,-67,-43,-42,-44,-45,-46,]),'GEQ':([24,26,29,32,33,69,70,71,72,94,95,100,101,102,103,104,105,106,107,108,115,116,117,132,133,134,],[64,-72,-48,-70,-71,-47,-68,-48,-72,-48,64,-59,-60,-61,-62,-63,-64,-65,-66,-41,-67,-43,-42,-44,-45,-46,]),'LEQ':([24,26,29,32,33,69,70,71,72,94,95,100,101,102,103,104,105,106,107,108,115,116,117,132,133,134,],[65,-72,-48,-70,-71,-47,-68,-48,-72,-48,65,-59,-60,-61,-62,-63,-64,-65,-66,-41,-67,-43,-42,-44,-45,-46,]),'NEQ':([24,26,29,32,33,69,70,71,72,94,95,100,101,102,103,104,105,106,107,108,115,116,117,132,133,134,],[66,-72,-48,-70,-71,-47,-68,-48,-72,-48,66,-59,-60,-61,-62,-63,-64,-65,-66,-41,-67,-43,-42,-44,-45,-46,]),'>':([24,26,29,32,33,69,70,71,72,94,95,100,101,102,103,104,105,106,107,108,115,116,117,132,133,134,],[67,-72,-48,-70,-71,-47,-68,-48,-72,-48,67,-59,-60,-61,-62,-63,-64,-65,-66,-41,-67,-43,-42,-44,-45,-46,]),'<':([24,26,29,32,33,69,70,71,72,94,95,100,101,102,103,104,105,106,107,108,115,116,117,132,133,134,],[68,-72,-48,-70,-71,-47,-68,-48,-72,-48,68,-59,-60,-61,-62,-63,-64,-65,-66,-41,-67,-43,-42,-44,-45,-46,]),'TRANSPOSE':([26,29,32,33,69,70,71,72,74,94,100,101,102,103,104,105,106,107,108,115,116,117,132,133,134,141,142,149,],[69,-48,-70,-71,-47,-68,-48,69,69,-48,-59,-60,-61,-62,-63,-64,-65,-66,-41,-67,-43,-42,-44,-45,-46,-48,69,69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,3,4,139,],[2,17,18,148,]),'instruction':([0,3,4,125,126,128,139,147,],[3,3,3,138,138,138,3,138,]),'assignment':([0,3,4,125,126,128,139,147,],[5,5,5,5,5,5,5,5,]),'conditional':([0,3,4,125,126,128,139,147,],[6,6,6,6,6,6,6,6,]),'variable':([0,3,4,125,126,128,139,147,],[11,11,11,11,11,11,11,11,]),'matrixelem':([0,3,4,9,34,38,39,40,41,42,43,44,45,46,47,118,119,124,125,126,128,139,147,],[16,16,16,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,16,16,16,16,16,]),'rvalue':([9,34,38,39,40,41,42,43,44,45,46,47,118,119,124,],[22,77,82,83,84,85,86,87,88,89,90,91,77,77,82,]),'numexpr':([9,30,31,34,38,39,40,41,42,43,44,45,46,47,48,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,118,119,124,127,129,144,],[24,70,73,24,24,24,24,24,24,24,24,24,24,24,95,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,121,122,24,24,24,143,146,150,]),'matrix':([9,30,31,34,38,39,40,41,42,43,44,45,46,47,48,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,78,79,80,118,119,124,127,129,144,],[26,72,74,26,26,26,26,26,26,26,26,26,26,26,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,26,26,26,142,72,149,]),'logexpr':([9,34,38,39,40,41,42,43,44,45,46,47,48,50,118,119,124,],[27,27,27,27,27,27,27,27,27,27,27,27,93,93,27,27,27,]),'rows':([34,118,],[75,130,]),'rowelems':([34,118,119,],[76,76,131,]),'prtvalues':([38,124,],[81,136,]),'cond':([48,50,],[92,98,]),'forexpr':([49,],[96,]),'block':([125,126,128,147,],[137,140,145,152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','parser2.py',37),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','parser2.py',41),
  ('instructions -> instruction','instructions',1,'p_instructions','parser2.py',42),
  ('instructions -> { instructions }','instructions',3,'p_instructions','parser2.py',43),
  ('instruction -> assignment ;','instruction',2,'p_instruction','parser2.py',53),
  ('instruction -> conditional','instruction',1,'p_instruction','parser2.py',54),
  ('instruction -> BREAK ;','instruction',2,'p_instruction','parser2.py',55),
  ('instruction -> CONTINUE ;','instruction',2,'p_instruction','parser2.py',56),
  ('instruction -> RETURN rvalue ;','instruction',3,'p_instruction','parser2.py',57),
  ('instruction -> RETURN ;','instruction',2,'p_instruction','parser2.py',58),
  ('instruction -> PRINT ( prtvalues ) ;','instruction',5,'p_instruction','parser2.py',59),
  ('assignment -> variable = rvalue','assignment',3,'p_assignment','parser2.py',68),
  ('assignment -> variable DOTADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',69),
  ('assignment -> variable DOTSUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',70),
  ('assignment -> variable DOTMULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',71),
  ('assignment -> variable DOTDIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',72),
  ('assignment -> variable ADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',73),
  ('assignment -> variable SUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',74),
  ('assignment -> variable MULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',75),
  ('assignment -> variable DIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',76),
  ('variable -> ID','variable',1,'p_variable','parser2.py',80),
  ('variable -> matrixelem','variable',1,'p_variable','parser2.py',81),
  ('matrixelem -> ID [ numexpr , numexpr ]','matrixelem',6,'p_matrixelem','parser2.py',85),
  ('conditional -> IF ( cond ) block','conditional',5,'p_conditional','parser2.py',89),
  ('conditional -> IF ( cond ) block ELSE block','conditional',7,'p_conditional','parser2.py',90),
  ('conditional -> FOR ( forexpr ) block','conditional',5,'p_conditional','parser2.py',91),
  ('conditional -> WHILE ( cond ) block','conditional',5,'p_conditional','parser2.py',92),
  ('cond -> logexpr','cond',1,'p_cond','parser2.py',99),
  ('cond -> ID','cond',1,'p_cond','parser2.py',100),
  ('block -> instruction','block',1,'p_block','parser2.py',104),
  ('block -> { instructions }','block',3,'p_block','parser2.py',105),
  ('prtvalues -> rvalue , prtvalues','prtvalues',3,'p_prtvalues','parser2.py',112),
  ('prtvalues -> rvalue','prtvalues',1,'p_prtvalues','parser2.py',113),
  ('rvalue -> numexpr','rvalue',1,'p_rvalue','parser2.py',120),
  ('rvalue -> matrixelem','rvalue',1,'p_rvalue','parser2.py',121),
  ('rvalue -> matrix','rvalue',1,'p_rvalue','parser2.py',122),
  ('rvalue -> logexpr','rvalue',1,'p_rvalue','parser2.py',123),
  ('rvalue -> STRING','rvalue',1,'p_rvalue','parser2.py',124),
  ('rvalue -> ID','rvalue',1,'p_rvalue','parser2.py',125),
  ('forexpr -> ID = matrix','forexpr',3,'p_forexpr','parser2.py',129),
  ('matrix -> numexpr : numexpr','matrix',3,'p_matrix','parser2.py',133),
  ('matrix -> [ rows ]','matrix',3,'p_matrix','parser2.py',134),
  ('matrix -> ( matrix )','matrix',3,'p_matrix','parser2.py',135),
  ('matrix -> ZEROS ( numexpr )','matrix',4,'p_matrix','parser2.py',136),
  ('matrix -> ONES ( numexpr )','matrix',4,'p_matrix','parser2.py',137),
  ('matrix -> EYE ( numexpr )','matrix',4,'p_matrix','parser2.py',138),
  ('matrix -> matrix TRANSPOSE','matrix',2,'p_matrix','parser2.py',139),
  ('matrix -> ID','matrix',1,'p_matrix','parser2.py',140),
  ('rows -> rowelems ; rows','rows',3,'p_rows','parser2.py',166),
  ('rows -> rowelems','rows',1,'p_rows','parser2.py',167),
  ('rowelems -> rvalue , rowelems','rowelems',3,'p_rowelems','parser2.py',174),
  ('rowelems -> rvalue','rowelems',1,'p_rowelems','parser2.py',175),
  ('logexpr -> numexpr EQ numexpr','logexpr',3,'p_logexpr','parser2.py',182),
  ('logexpr -> numexpr GEQ numexpr','logexpr',3,'p_logexpr','parser2.py',183),
  ('logexpr -> numexpr LEQ numexpr','logexpr',3,'p_logexpr','parser2.py',184),
  ('logexpr -> numexpr NEQ numexpr','logexpr',3,'p_logexpr','parser2.py',185),
  ('logexpr -> numexpr > numexpr','logexpr',3,'p_logexpr','parser2.py',186),
  ('logexpr -> numexpr < numexpr','logexpr',3,'p_logexpr','parser2.py',187),
  ('numexpr -> numexpr + numexpr','numexpr',3,'p_numexpr','parser2.py',206),
  ('numexpr -> numexpr - numexpr','numexpr',3,'p_numexpr','parser2.py',207),
  ('numexpr -> numexpr * numexpr','numexpr',3,'p_numexpr','parser2.py',208),
  ('numexpr -> numexpr / numexpr','numexpr',3,'p_numexpr','parser2.py',209),
  ('numexpr -> numexpr DOTADD numexpr','numexpr',3,'p_numexpr','parser2.py',210),
  ('numexpr -> numexpr DOTSUB numexpr','numexpr',3,'p_numexpr','parser2.py',211),
  ('numexpr -> numexpr DOTMUL numexpr','numexpr',3,'p_numexpr','parser2.py',212),
  ('numexpr -> numexpr DOTDIV numexpr','numexpr',3,'p_numexpr','parser2.py',213),
  ('numexpr -> ( numexpr )','numexpr',3,'p_numexpr','parser2.py',214),
  ('numexpr -> - numexpr','numexpr',2,'p_numexpr','parser2.py',215),
  ('numexpr -> ID','numexpr',1,'p_numexpr','parser2.py',216),
  ('numexpr -> INTEGER','numexpr',1,'p_numexpr','parser2.py',217),
  ('numexpr -> FLOAT','numexpr',1,'p_numexpr','parser2.py',218),
  ('numexpr -> matrix','numexpr',1,'p_numexpr','parser2.py',219),
]
