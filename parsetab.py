
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNDOTADDASSIGNDOTSUBASSIGNDOTMULASSIGNDOTDIVASSIGNleft<>EQLEQGEQNEQleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVleftTRANSPOSEADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTADDASSIGN DOTDIV DOTDIVASSIGN DOTMUL DOTMULASSIGN DOTSUB DOTSUBASSIGN ELSE EQ EYE FLOAT FOR GEQ ID IF INTEGER LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN TRANSPOSE WHILE ZEROSprogram : instructionsinstructions : instruction instructions\n                        | instruction\n                        | '{' instructions '}'instruction  : assignment ';'\n                        | conditional\n                        | BREAK ';'\n                        | CONTINUE ';'\n                        | RETURN rvalue ';'\n                        | RETURN ';'\n                        | PRINT '(' prtvalues ')' ';' assignment   : variable '=' rvalue\n                        | variable DOTADDASSIGN rvalue\n                        | variable DOTSUBASSIGN rvalue\n                        | variable DOTMULASSIGN rvalue\n                        | variable DOTDIVASSIGN rvalue\n                        | variable ADDASSIGN rvalue\n                        | variable SUBASSIGN rvalue\n                        | variable MULASSIGN rvalue\n                        | variable DIVASSIGN rvaluevariable : ID\n                    | matrixelemmatrixelem   : ID '[' expr ',' expr ']'conditional  : IF '(' expr ')' block\n                        | IF '(' expr ')' block ELSE block\n                        | FOR '(' forexpr ')' block\n                        | WHILE '(' expr ')' blockblock : instruction\n                 | '{' instructions '}' prtvalues    : rvalue ',' prtvalues\n                        | rvaluervalue   : expr\n                    | matrixelem\n                    | STRINGforexpr  : ID '=' exprrows : rowelems ';' rows\n                | rowelemsrowelems : rvalue ',' rowelems\n                    | rvalueexpr : expr '+' expr\n                | expr '-' expr\n                | expr '*' expr\n                | expr '/' expr\n                | expr DOTADD expr\n                | expr DOTSUB expr\n                | expr DOTMUL expr\n                | expr DOTDIV expr\n                | expr EQ expr\n                | expr GEQ expr\n                | expr LEQ expr\n                | expr NEQ expr\n                | expr '>' expr\n                | expr '<' expr\n                | expr ':' expr\n                | '[' rows ']'\n                | '(' expr ')'\n                | ZEROS '(' expr ')'\n                | ONES '(' expr ')'\n                | EYE '(' expr ')'\n                | expr TRANSPOSE\n                | INTEGER\n                | FLOAT\n                | ID"
    
_lr_action_items = {'{':([0,3,4,6,19,20,21,23,50,115,116,118,125,127,128,129,130,132,134,137,138,],[4,4,4,-6,-5,-7,-8,-10,-9,129,129,129,-11,-24,-28,4,-26,-27,129,-25,-29,]),'BREAK':([0,3,4,6,19,20,21,23,50,115,116,118,125,127,128,129,130,132,134,137,138,],[7,7,7,-6,-5,-7,-8,-10,-9,7,7,7,-11,-24,-28,7,-26,-27,7,-25,-29,]),'CONTINUE':([0,3,4,6,19,20,21,23,50,115,116,118,125,127,128,129,130,132,134,137,138,],[8,8,8,-6,-5,-7,-8,-10,-9,8,8,8,-11,-24,-28,8,-26,-27,8,-25,-29,]),'RETURN':([0,3,4,6,19,20,21,23,50,115,116,118,125,127,128,129,130,132,134,137,138,],[9,9,9,-6,-5,-7,-8,-10,-9,9,9,9,-11,-24,-28,9,-26,-27,9,-25,-29,]),'PRINT':([0,3,4,6,19,20,21,23,50,115,116,118,125,127,128,129,130,132,134,137,138,],[10,10,10,-6,-5,-7,-8,-10,-9,10,10,10,-11,-24,-28,10,-26,-27,10,-25,-29,]),'IF':([0,3,4,6,19,20,21,23,50,115,116,118,125,127,128,129,130,132,134,137,138,],[12,12,12,-6,-5,-7,-8,-10,-9,12,12,12,-11,-24,-28,12,-26,-27,12,-25,-29,]),'FOR':([0,3,4,6,19,20,21,23,50,115,116,118,125,127,128,129,130,132,134,137,138,],[13,13,13,-6,-5,-7,-8,-10,-9,13,13,13,-11,-24,-28,13,-26,-27,13,-25,-29,]),'WHILE':([0,3,4,6,19,20,21,23,50,115,116,118,125,127,128,129,130,132,134,137,138,],[14,14,14,-6,-5,-7,-8,-10,-9,14,14,14,-11,-24,-28,14,-26,-27,14,-25,-29,]),'ID':([0,3,4,6,9,19,20,21,23,27,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,73,74,107,108,114,115,116,117,118,119,125,127,128,129,130,132,134,137,138,],[15,15,15,-6,34,-5,-7,-8,-10,34,71,34,34,34,34,34,34,34,34,34,34,71,88,71,71,-9,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,34,34,34,15,15,71,15,71,-11,-24,-28,15,-26,-27,15,-25,-29,]),'$end':([1,2,3,6,17,19,20,21,23,49,50,125,127,128,130,132,137,138,],[0,-1,-3,-6,-2,-5,-7,-8,-10,-4,-9,-11,-24,-28,-26,-27,-25,-29,]),'}':([3,6,17,18,19,20,21,23,49,50,125,127,128,130,132,135,137,138,],[-3,-6,-2,49,-5,-7,-8,-10,-4,-9,-11,-24,-28,-26,-27,138,-25,-29,]),';':([5,7,8,9,22,24,25,26,32,33,34,66,68,69,71,77,78,79,80,81,82,83,84,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,113,121,122,123,124,136,],[19,20,21,23,50,-32,-33,-34,-61,-62,-63,-60,107,-39,-63,-12,-13,-14,-15,-16,-17,-18,-19,-20,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,125,-38,-57,-58,-59,-23,]),'ELSE':([6,19,20,21,23,50,125,127,128,130,132,137,138,],[-6,-5,-7,-8,-10,-9,-11,134,-28,-26,-27,-25,-29,]),'STRING':([9,27,35,36,37,38,39,40,41,42,43,44,107,108,114,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'[':([9,15,27,28,34,35,36,37,38,39,40,41,42,43,44,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,73,74,107,108,114,117,119,],[27,48,27,27,48,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'(':([9,10,12,13,14,27,28,29,30,31,35,36,37,38,39,40,41,42,43,44,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,73,74,107,108,114,117,119,],[28,35,45,46,47,28,28,72,73,74,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'ZEROS':([9,27,28,35,36,37,38,39,40,41,42,43,44,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,73,74,107,108,114,117,119,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'ONES':([9,27,28,35,36,37,38,39,40,41,42,43,44,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,73,74,107,108,114,117,119,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'EYE':([9,27,28,35,36,37,38,39,40,41,42,43,44,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,73,74,107,108,114,117,119,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'INTEGER':([9,27,28,35,36,37,38,39,40,41,42,43,44,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,73,74,107,108,114,117,119,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FLOAT':([9,27,28,35,36,37,38,39,40,41,42,43,44,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,73,74,107,108,114,117,119,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'=':([11,15,16,88,136,],[36,-21,-22,117,-23,]),'DOTADDASSIGN':([11,15,16,136,],[37,-21,-22,-23,]),'DOTSUBASSIGN':([11,15,16,136,],[38,-21,-22,-23,]),'DOTMULASSIGN':([11,15,16,136,],[39,-21,-22,-23,]),'DOTDIVASSIGN':([11,15,16,136,],[40,-21,-22,-23,]),'ADDASSIGN':([11,15,16,136,],[41,-21,-22,-23,]),'SUBASSIGN':([11,15,16,136,],[42,-21,-22,-23,]),'MULASSIGN':([11,15,16,136,],[43,-21,-22,-23,]),'DIVASSIGN':([11,15,16,136,],[44,-21,-22,-23,]),',':([24,25,26,32,33,34,66,69,71,76,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,122,123,124,136,],[-32,-33,-34,-61,-62,-63,-60,108,-63,114,119,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-23,]),']':([24,25,26,32,33,34,66,67,68,69,71,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,120,121,122,123,124,133,136,],[-32,-33,-34,-61,-62,-63,-60,106,-37,-39,-63,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-36,-38,-57,-58,-59,136,-23,]),')':([24,25,26,32,33,34,66,70,71,75,76,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,126,131,136,],[-32,-33,-34,-61,-62,-63,-60,109,-63,113,-31,115,116,118,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,122,123,124,-57,-58,-59,-30,-35,-23,]),'+':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[51,-61,-62,-63,-60,51,-63,51,51,51,-40,-41,-42,-43,-44,-45,-46,-47,51,51,51,51,51,51,51,-55,-56,51,51,51,-57,-58,-59,51,51,]),'-':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[52,-61,-62,-63,-60,52,-63,52,52,52,-40,-41,-42,-43,-44,-45,-46,-47,52,52,52,52,52,52,52,-55,-56,52,52,52,-57,-58,-59,52,52,]),'*':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[53,-61,-62,-63,-60,53,-63,53,53,53,53,53,-42,-43,53,53,-46,-47,53,53,53,53,53,53,53,-55,-56,53,53,53,-57,-58,-59,53,53,]),'/':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[54,-61,-62,-63,-60,54,-63,54,54,54,54,54,-42,-43,54,54,-46,-47,54,54,54,54,54,54,54,-55,-56,54,54,54,-57,-58,-59,54,54,]),'DOTADD':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[55,-61,-62,-63,-60,55,-63,55,55,55,-40,-41,-42,-43,-44,-45,-46,-47,55,55,55,55,55,55,55,-55,-56,55,55,55,-57,-58,-59,55,55,]),'DOTSUB':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[56,-61,-62,-63,-60,56,-63,56,56,56,-40,-41,-42,-43,-44,-45,-46,-47,56,56,56,56,56,56,56,-55,-56,56,56,56,-57,-58,-59,56,56,]),'DOTMUL':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[57,-61,-62,-63,-60,57,-63,57,57,57,57,57,-42,-43,57,57,-46,-47,57,57,57,57,57,57,57,-55,-56,57,57,57,-57,-58,-59,57,57,]),'DOTDIV':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[58,-61,-62,-63,-60,58,-63,58,58,58,58,58,-42,-43,58,58,-46,-47,58,58,58,58,58,58,58,-55,-56,58,58,58,-57,-58,-59,58,58,]),'EQ':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[59,-61,-62,-63,-60,59,-63,59,59,59,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,59,-55,-56,59,59,59,-57,-58,-59,59,59,]),'GEQ':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[60,-61,-62,-63,-60,60,-63,60,60,60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,60,-55,-56,60,60,60,-57,-58,-59,60,60,]),'LEQ':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[61,-61,-62,-63,-60,61,-63,61,61,61,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,61,-55,-56,61,61,61,-57,-58,-59,61,61,]),'NEQ':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[62,-61,-62,-63,-60,62,-63,62,62,62,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,62,-55,-56,62,62,62,-57,-58,-59,62,62,]),'>':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[63,-61,-62,-63,-60,63,-63,63,63,63,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,63,-55,-56,63,63,63,-57,-58,-59,63,63,]),'<':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[64,-61,-62,-63,-60,64,-63,64,64,64,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,64,-55,-56,64,64,64,-57,-58,-59,64,64,]),':':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[65,-61,-62,-63,-60,65,-63,65,65,65,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,65,-55,-56,65,65,65,-57,-58,-59,65,65,]),'TRANSPOSE':([24,32,33,34,66,70,71,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,110,111,112,122,123,124,131,133,],[66,-61,-62,-63,-60,66,-63,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-55,-56,66,66,66,-57,-58,-59,66,66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,3,4,129,],[2,17,18,135,]),'instruction':([0,3,4,115,116,118,129,134,],[3,3,3,128,128,128,3,128,]),'assignment':([0,3,4,115,116,118,129,134,],[5,5,5,5,5,5,5,5,]),'conditional':([0,3,4,115,116,118,129,134,],[6,6,6,6,6,6,6,6,]),'variable':([0,3,4,115,116,118,129,134,],[11,11,11,11,11,11,11,11,]),'matrixelem':([0,3,4,9,27,35,36,37,38,39,40,41,42,43,44,107,108,114,115,116,118,129,134,],[16,16,16,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,16,16,16,16,16,]),'rvalue':([9,27,35,36,37,38,39,40,41,42,43,44,107,108,114,],[22,69,76,77,78,79,80,81,82,83,84,85,69,69,76,]),'expr':([9,27,28,35,36,37,38,39,40,41,42,43,44,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,73,74,107,108,114,117,119,],[24,24,70,24,24,24,24,24,24,24,24,24,24,86,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,111,112,24,24,24,131,133,]),'rows':([27,107,],[67,120,]),'rowelems':([27,107,108,],[68,68,121,]),'prtvalues':([35,114,],[75,126,]),'forexpr':([46,],[87,]),'block':([115,116,118,134,],[127,130,132,137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','parser2.py',37),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','parser2.py',41),
  ('instructions -> instruction','instructions',1,'p_instructions','parser2.py',42),
  ('instructions -> { instructions }','instructions',3,'p_instructions','parser2.py',43),
  ('instruction -> assignment ;','instruction',2,'p_instruction','parser2.py',53),
  ('instruction -> conditional','instruction',1,'p_instruction','parser2.py',54),
  ('instruction -> BREAK ;','instruction',2,'p_instruction','parser2.py',55),
  ('instruction -> CONTINUE ;','instruction',2,'p_instruction','parser2.py',56),
  ('instruction -> RETURN rvalue ;','instruction',3,'p_instruction','parser2.py',57),
  ('instruction -> RETURN ;','instruction',2,'p_instruction','parser2.py',58),
  ('instruction -> PRINT ( prtvalues ) ;','instruction',5,'p_instruction','parser2.py',59),
  ('assignment -> variable = rvalue','assignment',3,'p_assignment','parser2.py',68),
  ('assignment -> variable DOTADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',69),
  ('assignment -> variable DOTSUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',70),
  ('assignment -> variable DOTMULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',71),
  ('assignment -> variable DOTDIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',72),
  ('assignment -> variable ADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',73),
  ('assignment -> variable SUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',74),
  ('assignment -> variable MULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',75),
  ('assignment -> variable DIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',76),
  ('variable -> ID','variable',1,'p_variable','parser2.py',80),
  ('variable -> matrixelem','variable',1,'p_variable','parser2.py',81),
  ('matrixelem -> ID [ expr , expr ]','matrixelem',6,'p_matrixelem','parser2.py',85),
  ('conditional -> IF ( expr ) block','conditional',5,'p_conditional','parser2.py',89),
  ('conditional -> IF ( expr ) block ELSE block','conditional',7,'p_conditional','parser2.py',90),
  ('conditional -> FOR ( forexpr ) block','conditional',5,'p_conditional','parser2.py',91),
  ('conditional -> WHILE ( expr ) block','conditional',5,'p_conditional','parser2.py',92),
  ('block -> instruction','block',1,'p_block','parser2.py',99),
  ('block -> { instructions }','block',3,'p_block','parser2.py',100),
  ('prtvalues -> rvalue , prtvalues','prtvalues',3,'p_prtvalues','parser2.py',107),
  ('prtvalues -> rvalue','prtvalues',1,'p_prtvalues','parser2.py',108),
  ('rvalue -> expr','rvalue',1,'p_rvalue','parser2.py',115),
  ('rvalue -> matrixelem','rvalue',1,'p_rvalue','parser2.py',116),
  ('rvalue -> STRING','rvalue',1,'p_rvalue','parser2.py',117),
  ('forexpr -> ID = expr','forexpr',3,'p_forexpr','parser2.py',121),
  ('rows -> rowelems ; rows','rows',3,'p_rows','parser2.py',125),
  ('rows -> rowelems','rows',1,'p_rows','parser2.py',126),
  ('rowelems -> rvalue , rowelems','rowelems',3,'p_rowelems','parser2.py',133),
  ('rowelems -> rvalue','rowelems',1,'p_rowelems','parser2.py',134),
  ('expr -> expr + expr','expr',3,'p_expr','parser2.py',141),
  ('expr -> expr - expr','expr',3,'p_expr','parser2.py',142),
  ('expr -> expr * expr','expr',3,'p_expr','parser2.py',143),
  ('expr -> expr / expr','expr',3,'p_expr','parser2.py',144),
  ('expr -> expr DOTADD expr','expr',3,'p_expr','parser2.py',145),
  ('expr -> expr DOTSUB expr','expr',3,'p_expr','parser2.py',146),
  ('expr -> expr DOTMUL expr','expr',3,'p_expr','parser2.py',147),
  ('expr -> expr DOTDIV expr','expr',3,'p_expr','parser2.py',148),
  ('expr -> expr EQ expr','expr',3,'p_expr','parser2.py',149),
  ('expr -> expr GEQ expr','expr',3,'p_expr','parser2.py',150),
  ('expr -> expr LEQ expr','expr',3,'p_expr','parser2.py',151),
  ('expr -> expr NEQ expr','expr',3,'p_expr','parser2.py',152),
  ('expr -> expr > expr','expr',3,'p_expr','parser2.py',153),
  ('expr -> expr < expr','expr',3,'p_expr','parser2.py',154),
  ('expr -> expr : expr','expr',3,'p_expr','parser2.py',155),
  ('expr -> [ rows ]','expr',3,'p_expr','parser2.py',156),
  ('expr -> ( expr )','expr',3,'p_expr','parser2.py',157),
  ('expr -> ZEROS ( expr )','expr',4,'p_expr','parser2.py',158),
  ('expr -> ONES ( expr )','expr',4,'p_expr','parser2.py',159),
  ('expr -> EYE ( expr )','expr',4,'p_expr','parser2.py',160),
  ('expr -> expr TRANSPOSE','expr',2,'p_expr','parser2.py',161),
  ('expr -> INTEGER','expr',1,'p_expr','parser2.py',162),
  ('expr -> FLOAT','expr',1,'p_expr','parser2.py',163),
  ('expr -> ID','expr',1,'p_expr','parser2.py',164),
]
