
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNDOTADDASSIGNDOTSUBASSIGNDOTMULASSIGNDOTDIVASSIGNleft+-left*/leftTRANSPOSEADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTADDASSIGN DOTDIV DOTDIVASSIGN DOTMUL DOTMULASSIGN DOTSUB DOTSUBASSIGN ELSE EQ EYE FLOAT FOR GEQ ID IF INTEGER LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN TRANSPOSE WHILE ZEROSprogram : instructionsinstructions : instruction\n                        | instruction instructions\n                        | '{' instructions '}'instruction  : assignment ';'\n                        | conditional\n                        | BREAK ';'\n                        | CONTINUE ';'\n                        | return\n                        | prt ';' assignment   : variable '=' rvalue\n                        | variable DOTADDASSIGN rvalue\n                        | variable DOTSUBASSIGN rvalue\n                        | variable DOTMULASSIGN rvalue\n                        | variable DOTDIVASSIGN rvalue\n                        | variable ADDASSIGN rvalue\n                        | variable SUBASSIGN rvalue\n                        | variable MULASSIGN rvalue\n                        | variable DIVASSIGN rvaluevariable : ID\n                    | matrixelemmatrixelem   : ID '[' INTEGER ',' INTEGER ']'conditional  : IF '(' logexpr ')' '{' instructions '}'\n                        | IF '(' logexpr ')' instruction\n                        | IF '(' logexpr ')' '{' instructions '}' ELSE '{' instructions '}'\n                        | IF '(' logexpr ')' instruction ELSE '{' instructions '}'\n                        | IF '(' logexpr ')' '{' instructions '}' ELSE instruction\n                        | IF '(' logexpr ')' instruction ELSE instruction\n                        | FOR '(' forexpr ')' '{' instructions '}'\n                        | FOR '(' forexpr ')' instructions\n                        | WHILE '(' logexpr ')' '{' instructions '}'\n                        | WHILE '(' logexpr ')' instruction prt  : PRINT '(' prtvalues ')'prtvalues    : prtvalue ',' prtvalues\n                        | prtvalueprtvalue : ID\n                    | rvaluervalue   : numexpr\n                    | matrix\n                    | logexpr\n                    | STRINGforexpr  : ID '=' INTEGER ':' INTEGER\n                    | ID '=' ID ':' INTEGER\n                    | ID '=' INTEGER ':' ID\n                    | ID '=' ID ':' IDmatrix   : numexpr ':' numexpr\n                    | '[' row ';' rows ']'\n                    | '(' matrix ')'\n                    | ZEROS '(' numexpr ')'\n                    | ONES '(' numexpr ')'\n                    | EYE '(' numexpr ')'\n                    | matrix TRANSPOSE\n                    | IDrows : row ';' rows\n                | rowrow  : rowelemsrowelems : rowelem ',' rowelems\n                    | rowelemrowelem  : INTEGER\n                    | FLOATlogexpr  : numexpr EQ numexpr\n                    | numexpr GEQ numexpr\n                    | numexpr LEQ numexpr\n                    | numexpr NEQ numexpr\n                    | numexpr '>' numexpr\n                    | numexpr '<' numexpr\n                    | IDnumexpr  : numexpr '+' numexpr\n                    | numexpr '-' numexpr\n                    | numexpr '*' numexpr\n                    | numexpr '/' numexpr\n                    | numexpr DOTADD numexpr\n                    | numexpr DOTSUB numexpr\n                    | numexpr DOTMUL numexpr\n                    | numexpr DOTDIV numexpr\n                    | '(' numexpr ')'\n                    | '-' numexpr\n                    | INTEGER\n                    | FLOAT\n                    | matrix\n                    | IDreturn   : RETURN ';'\n                    | RETURN variable ';'\n                    | RETURN INTEGER ';'\n                    | RETURN FLOAT ';'\n                    | RETURN STRING ';'\n                    | RETURN logexpr"
    
_lr_action_items = {'{':([0,3,4,6,9,19,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,142,143,144,145,148,149,153,154,155,159,165,167,168,169,170,175,177,179,180,181,183,],[4,4,4,-6,-9,-3,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,142,144,148,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,4,-24,4,-30,4,-32,-49,-50,-51,169,-47,-23,-28,4,-4,-31,179,4,-27,-26,-25,]),'BREAK':([0,3,4,6,9,19,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,142,143,144,145,148,149,153,154,155,159,165,167,168,169,170,175,177,179,180,181,183,],[7,7,7,-6,-9,-3,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,7,7,7,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,7,-24,7,-30,7,-32,-49,-50,-51,7,-47,-23,-28,7,-4,-31,7,7,-27,-26,-25,]),'CONTINUE':([0,3,4,6,9,19,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,142,143,144,145,148,149,153,154,155,159,165,167,168,169,170,175,177,179,180,181,183,],[8,8,8,-6,-9,-3,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,8,8,8,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,8,-24,8,-30,8,-32,-49,-50,-51,8,-47,-23,-28,8,-4,-31,8,8,-27,-26,-25,]),'IF':([0,3,4,6,9,19,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,142,143,144,145,148,149,153,154,155,159,165,167,168,169,170,175,177,179,180,181,183,],[12,12,12,-6,-9,-3,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,12,12,12,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,12,-24,12,-30,12,-32,-49,-50,-51,12,-47,-23,-28,12,-4,-31,12,12,-27,-26,-25,]),'FOR':([0,3,4,6,9,19,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,142,143,144,145,148,149,153,154,155,159,165,167,168,169,170,175,177,179,180,181,183,],[13,13,13,-6,-9,-3,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,13,13,13,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,13,-24,13,-30,13,-32,-49,-50,-51,13,-47,-23,-28,13,-4,-31,13,13,-27,-26,-25,]),'WHILE':([0,3,4,6,9,19,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,142,143,144,145,148,149,153,154,155,159,165,167,168,169,170,175,177,179,180,181,183,],[14,14,14,-6,-9,-3,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,14,14,14,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,14,-24,14,-30,14,-32,-49,-50,-51,14,-47,-23,-28,14,-4,-31,14,14,-27,-26,-25,]),'RETURN':([0,3,4,6,9,19,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,142,143,144,145,148,149,153,154,155,159,165,167,168,169,170,175,177,179,180,181,183,],[15,15,15,-6,-9,-3,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,15,15,15,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,15,-24,15,-30,15,-32,-49,-50,-51,15,-47,-23,-28,15,-4,-31,15,15,-27,-26,-25,]),'PRINT':([0,3,4,6,9,19,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,142,143,144,145,148,149,153,154,155,159,165,167,168,169,170,175,177,179,180,181,183,],[16,16,16,-6,-9,-3,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,16,16,16,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,16,-24,16,-30,16,-32,-49,-50,-51,16,-47,-23,-28,16,-4,-31,16,16,-27,-26,-25,]),'ID':([0,3,4,6,9,15,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,42,43,46,47,48,52,54,60,61,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,100,101,104,105,106,107,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,140,142,143,144,145,148,149,153,154,155,159,161,162,165,167,168,169,170,175,177,179,180,181,183,],[17,17,17,-6,-9,43,-3,-5,-7,-8,-10,62,62,62,62,62,62,62,62,62,72,74,72,-82,-87,-67,101,101,-80,110,-4,-78,-79,-83,-84,-85,-86,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-77,-53,-52,101,101,101,17,17,146,17,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,110,17,-24,17,-30,17,-32,-49,-50,-51,17,171,173,-47,-23,-28,17,-4,-31,17,17,-27,-26,-25,]),'$end':([1,2,3,6,9,19,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,143,145,149,153,154,155,165,167,168,170,175,180,181,183,],[0,-1,-2,-6,-9,-3,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-24,-30,-32,-49,-50,-51,-47,-23,-28,-4,-31,-27,-26,-25,]),'}':([3,6,9,19,20,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,143,145,149,153,154,155,158,160,163,165,167,168,170,175,178,180,181,182,183,],[-2,-6,-9,-3,54,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-24,-30,-32,-49,-50,-51,167,170,175,-47,-23,-28,-4,-31,181,-27,-26,183,-25,]),'ELSE':([3,6,9,19,21,22,23,24,37,42,43,48,54,60,61,76,77,78,79,100,101,104,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,143,145,149,153,154,155,165,167,168,170,175,180,181,183,],[-2,-6,-9,-3,-5,-7,-8,-10,-82,-87,-67,-80,-4,-78,-79,-83,-84,-85,-86,-77,-53,-52,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,159,-30,-32,-49,-50,-51,-47,177,-28,-4,-31,-27,-26,-25,]),';':([5,7,8,10,15,18,38,39,40,41,43,48,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,95,96,97,98,99,100,101,104,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,139,150,152,153,154,155,165,166,],[21,22,23,24,37,-21,76,77,78,79,-20,-80,-11,-38,-39,-40,-41,-78,-79,-53,-12,-13,-14,-15,-16,-17,-18,-19,132,-56,-58,-59,-60,-77,-53,-52,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-33,164,-57,-49,-50,-51,-47,-22,]),'=':([11,17,18,74,166,],[25,-20,-21,115,-22,]),'DOTADDASSIGN':([11,17,18,166,],[26,-20,-21,-22,]),'DOTSUBASSIGN':([11,17,18,166,],[27,-20,-21,-22,]),'DOTMULASSIGN':([11,17,18,166,],[28,-20,-21,-22,]),'DOTDIVASSIGN':([11,17,18,166,],[29,-20,-21,-22,]),'ADDASSIGN':([11,17,18,166,],[30,-20,-21,-22,]),'SUBASSIGN':([11,17,18,166,],[31,-20,-21,-22,]),'MULASSIGN':([11,17,18,166,],[32,-20,-21,-22,]),'DIVASSIGN':([11,17,18,166,],[33,-20,-21,-22,]),'(':([12,13,14,15,16,25,26,27,28,29,30,31,32,33,34,36,46,47,49,50,51,52,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,105,106,107,140,],[34,35,36,47,52,47,47,47,47,47,47,47,47,47,47,47,47,47,105,106,107,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'INTEGER':([15,25,26,27,28,29,30,31,32,33,34,36,45,46,47,52,53,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,105,106,107,115,132,133,140,141,161,162,164,],[39,60,60,60,60,60,60,60,60,60,60,60,98,60,60,60,112,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,147,98,98,60,157,172,174,98,]),'FLOAT':([15,25,26,27,28,29,30,31,32,33,34,36,45,46,47,52,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,105,106,107,132,133,140,164,],[40,61,61,61,61,61,61,61,61,61,61,61,99,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,99,99,61,99,]),'STRING':([15,25,26,27,28,29,30,31,32,33,52,140,],[41,59,59,59,59,59,59,59,59,59,59,59,]),'-':([15,25,26,27,28,29,30,31,32,33,34,36,39,40,43,44,46,47,48,52,56,57,60,61,62,72,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,100,101,102,103,104,105,106,107,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,140,153,154,155,165,],[46,46,46,46,46,46,46,46,46,46,46,46,-78,-79,-53,87,46,46,-80,46,87,-80,-78,-79,-53,-53,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-77,-53,87,-80,-52,46,46,46,-53,87,87,87,87,87,87,-68,-69,-70,-71,87,87,87,87,87,-76,-48,87,87,87,46,-49,-50,-51,-47,]),'[':([15,17,25,26,27,28,29,30,31,32,33,34,36,43,46,47,52,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,105,106,107,140,],[45,53,45,45,45,45,45,45,45,45,45,45,45,53,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'ZEROS':([15,25,26,27,28,29,30,31,32,33,34,36,46,47,52,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,105,106,107,140,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'ONES':([15,25,26,27,28,29,30,31,32,33,34,36,46,47,52,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,105,106,107,140,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'EYE':([15,25,26,27,28,29,30,31,32,33,34,36,46,47,52,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,105,106,107,140,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'EQ':([39,40,43,44,48,56,57,60,61,62,72,100,101,104,110,123,124,125,126,127,128,129,130,131,134,135,153,154,155,165,],[-78,-79,-53,80,-80,80,-80,-78,-79,-53,-53,-77,-53,-52,-53,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-49,-50,-51,-47,]),'GEQ':([39,40,43,44,48,56,57,60,61,62,72,100,101,104,110,123,124,125,126,127,128,129,130,131,134,135,153,154,155,165,],[-78,-79,-53,81,-80,81,-80,-78,-79,-53,-53,-77,-53,-52,-53,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-49,-50,-51,-47,]),'LEQ':([39,40,43,44,48,56,57,60,61,62,72,100,101,104,110,123,124,125,126,127,128,129,130,131,134,135,153,154,155,165,],[-78,-79,-53,82,-80,82,-80,-78,-79,-53,-53,-77,-53,-52,-53,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-49,-50,-51,-47,]),'NEQ':([39,40,43,44,48,56,57,60,61,62,72,100,101,104,110,123,124,125,126,127,128,129,130,131,134,135,153,154,155,165,],[-78,-79,-53,83,-80,83,-80,-78,-79,-53,-53,-77,-53,-52,-53,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-49,-50,-51,-47,]),'>':([39,40,43,44,48,56,57,60,61,62,72,100,101,104,110,123,124,125,126,127,128,129,130,131,134,135,153,154,155,165,],[-78,-79,-53,84,-80,84,-80,-78,-79,-53,-53,-77,-53,-52,-53,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-49,-50,-51,-47,]),'<':([39,40,43,44,48,56,57,60,61,62,72,100,101,104,110,123,124,125,126,127,128,129,130,131,134,135,153,154,155,165,],[-78,-79,-53,85,-80,85,-80,-78,-79,-53,-53,-77,-53,-52,-53,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-49,-50,-51,-47,]),'+':([39,40,43,44,48,56,57,60,61,62,72,100,101,102,103,104,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,153,154,155,165,],[-78,-79,-53,86,-80,86,-80,-78,-79,-53,-53,-77,-53,86,-80,-52,-53,86,86,86,86,86,86,-68,-69,-70,-71,86,86,86,86,86,-76,-48,86,86,86,-49,-50,-51,-47,]),'*':([39,40,43,44,48,56,57,60,61,62,72,100,101,102,103,104,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,153,154,155,165,],[-78,-79,-53,88,-80,88,-80,-78,-79,-53,-53,88,-53,88,-80,-52,-53,88,88,88,88,88,88,88,88,-70,-71,88,88,88,88,88,-76,-48,88,88,88,-49,-50,-51,-47,]),'/':([39,40,43,44,48,56,57,60,61,62,72,100,101,102,103,104,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,153,154,155,165,],[-78,-79,-53,89,-80,89,-80,-78,-79,-53,-53,89,-53,89,-80,-52,-53,89,89,89,89,89,89,89,89,-70,-71,89,89,89,89,89,-76,-48,89,89,89,-49,-50,-51,-47,]),'DOTADD':([39,40,43,44,48,56,57,60,61,62,72,100,101,102,103,104,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,153,154,155,165,],[-78,-79,-53,90,-80,90,-80,-78,-79,-53,-53,-77,-53,90,-80,-52,-53,90,90,90,90,90,90,-68,-69,-70,-71,90,90,90,90,90,-76,-48,90,90,90,-49,-50,-51,-47,]),'DOTSUB':([39,40,43,44,48,56,57,60,61,62,72,100,101,102,103,104,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,153,154,155,165,],[-78,-79,-53,91,-80,91,-80,-78,-79,-53,-53,-77,-53,91,-80,-52,-53,91,91,91,91,91,91,-68,-69,-70,-71,91,91,91,91,91,-76,-48,91,91,91,-49,-50,-51,-47,]),'DOTMUL':([39,40,43,44,48,56,57,60,61,62,72,100,101,102,103,104,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,153,154,155,165,],[-78,-79,-53,92,-80,92,-80,-78,-79,-53,-53,-77,-53,92,-80,-52,-53,92,92,92,92,92,92,-68,-69,-70,-71,92,92,92,92,92,-76,-48,92,92,92,-49,-50,-51,-47,]),'DOTDIV':([39,40,43,44,48,56,57,60,61,62,72,100,101,102,103,104,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,153,154,155,165,],[-78,-79,-53,93,-80,93,-80,-78,-79,-53,-53,-77,-53,93,-80,-52,-53,93,93,93,93,93,93,-68,-69,-70,-71,93,93,93,93,93,-76,-48,93,93,93,-49,-50,-51,-47,]),':':([39,40,43,44,48,56,57,60,61,62,72,100,101,102,103,104,110,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,146,147,153,154,155,165,],[-78,-79,-53,94,-80,94,-80,-78,-79,-53,-53,-77,-53,94,-80,-52,-53,94,94,94,94,94,94,-68,-69,-70,-71,94,94,94,94,94,-76,-48,94,94,94,161,162,-49,-50,-51,-47,]),'TRANSPOSE':([43,48,57,60,61,62,72,100,101,103,104,110,123,124,125,126,127,128,129,130,131,134,135,153,154,155,165,],[-53,104,104,-78,-79,-53,-53,-77,-53,104,-52,-53,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-49,-50,-51,-47,]),')':([48,56,57,58,59,60,61,71,72,73,75,100,101,102,103,104,108,109,110,111,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,153,154,155,156,165,171,172,173,174,],[-80,-38,-39,-40,-41,-78,-79,113,-67,114,116,-77,-53,134,135,-52,139,-35,-36,-37,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,153,154,155,-49,-50,-51,-34,-47,-45,-43,-44,-42,]),',':([48,56,57,58,59,60,61,97,98,99,100,101,104,109,110,111,112,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,153,154,155,165,],[-80,-38,-39,-40,-41,-78,-79,133,-59,-60,-77,-53,-52,140,-36,-37,141,-61,-62,-63,-64,-65,-66,-68,-69,-70,-71,-72,-73,-74,-75,-46,-76,-48,-49,-50,-51,-47,]),']':([96,97,98,99,150,151,152,157,176,],[-56,-58,-59,-60,-55,165,-57,166,-54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,3,4,114,142,144,148,169,179,],[2,19,20,145,158,160,163,178,182,]),'instruction':([0,3,4,113,114,116,142,144,148,159,169,177,179,],[3,3,3,143,3,149,3,3,3,168,3,180,3,]),'assignment':([0,3,4,113,114,116,142,144,148,159,169,177,179,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'conditional':([0,3,4,113,114,116,142,144,148,159,169,177,179,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'return':([0,3,4,113,114,116,142,144,148,159,169,177,179,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'prt':([0,3,4,113,114,116,142,144,148,159,169,177,179,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'variable':([0,3,4,15,113,114,116,142,144,148,159,169,177,179,],[11,11,11,38,11,11,11,11,11,11,11,11,11,11,]),'matrixelem':([0,3,4,15,113,114,116,142,144,148,159,169,177,179,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'logexpr':([15,25,26,27,28,29,30,31,32,33,34,36,52,140,],[42,58,58,58,58,58,58,58,58,58,71,75,58,58,]),'numexpr':([15,25,26,27,28,29,30,31,32,33,34,36,46,47,52,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,105,106,107,140,],[44,56,56,56,56,56,56,56,56,56,44,44,100,102,56,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,136,137,138,56,]),'matrix':([15,25,26,27,28,29,30,31,32,33,34,36,46,47,52,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,105,106,107,140,],[48,57,57,57,57,57,57,57,57,57,48,48,48,103,57,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,57,]),'rvalue':([25,26,27,28,29,30,31,32,33,52,140,],[55,63,64,65,66,67,68,69,70,111,111,]),'forexpr':([35,],[73,]),'row':([45,132,164,],[95,150,150,]),'rowelems':([45,132,133,164,],[96,96,152,96,]),'rowelem':([45,132,133,164,],[97,97,97,97,]),'prtvalues':([52,140,],[108,156,]),'prtvalue':([52,140,],[109,109,]),'rows':([132,164,],[151,176,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','parser2.py',32),
  ('instructions -> instruction','instructions',1,'p_instructions','parser2.py',36),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','parser2.py',37),
  ('instructions -> { instructions }','instructions',3,'p_instructions','parser2.py',38),
  ('instruction -> assignment ;','instruction',2,'p_instruction','parser2.py',45),
  ('instruction -> conditional','instruction',1,'p_instruction','parser2.py',46),
  ('instruction -> BREAK ;','instruction',2,'p_instruction','parser2.py',47),
  ('instruction -> CONTINUE ;','instruction',2,'p_instruction','parser2.py',48),
  ('instruction -> return','instruction',1,'p_instruction','parser2.py',49),
  ('instruction -> prt ;','instruction',2,'p_instruction','parser2.py',50),
  ('assignment -> variable = rvalue','assignment',3,'p_assignment','parser2.py',55),
  ('assignment -> variable DOTADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',56),
  ('assignment -> variable DOTSUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',57),
  ('assignment -> variable DOTMULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',58),
  ('assignment -> variable DOTDIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',59),
  ('assignment -> variable ADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',60),
  ('assignment -> variable SUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',61),
  ('assignment -> variable MULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',62),
  ('assignment -> variable DIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',63),
  ('variable -> ID','variable',1,'p_variable','parser2.py',87),
  ('variable -> matrixelem','variable',1,'p_variable','parser2.py',88),
  ('matrixelem -> ID [ INTEGER , INTEGER ]','matrixelem',6,'p_matrixelem','parser2.py',91),
  ('conditional -> IF ( logexpr ) { instructions }','conditional',7,'p_conditional','parser2.py',94),
  ('conditional -> IF ( logexpr ) instruction','conditional',5,'p_conditional','parser2.py',95),
  ('conditional -> IF ( logexpr ) { instructions } ELSE { instructions }','conditional',11,'p_conditional','parser2.py',96),
  ('conditional -> IF ( logexpr ) instruction ELSE { instructions }','conditional',9,'p_conditional','parser2.py',97),
  ('conditional -> IF ( logexpr ) { instructions } ELSE instruction','conditional',9,'p_conditional','parser2.py',98),
  ('conditional -> IF ( logexpr ) instruction ELSE instruction','conditional',7,'p_conditional','parser2.py',99),
  ('conditional -> FOR ( forexpr ) { instructions }','conditional',7,'p_conditional','parser2.py',100),
  ('conditional -> FOR ( forexpr ) instructions','conditional',5,'p_conditional','parser2.py',101),
  ('conditional -> WHILE ( logexpr ) { instructions }','conditional',7,'p_conditional','parser2.py',102),
  ('conditional -> WHILE ( logexpr ) instruction','conditional',5,'p_conditional','parser2.py',103),
  ('prt -> PRINT ( prtvalues )','prt',4,'p_prt','parser2.py',106),
  ('prtvalues -> prtvalue , prtvalues','prtvalues',3,'p_prtvalues','parser2.py',109),
  ('prtvalues -> prtvalue','prtvalues',1,'p_prtvalues','parser2.py',110),
  ('prtvalue -> ID','prtvalue',1,'p_prtvalue','parser2.py',113),
  ('prtvalue -> rvalue','prtvalue',1,'p_prtvalue','parser2.py',114),
  ('rvalue -> numexpr','rvalue',1,'p_rvalue','parser2.py',117),
  ('rvalue -> matrix','rvalue',1,'p_rvalue','parser2.py',118),
  ('rvalue -> logexpr','rvalue',1,'p_rvalue','parser2.py',119),
  ('rvalue -> STRING','rvalue',1,'p_rvalue','parser2.py',120),
  ('forexpr -> ID = INTEGER : INTEGER','forexpr',5,'p_forexpr','parser2.py',124),
  ('forexpr -> ID = ID : INTEGER','forexpr',5,'p_forexpr','parser2.py',125),
  ('forexpr -> ID = INTEGER : ID','forexpr',5,'p_forexpr','parser2.py',126),
  ('forexpr -> ID = ID : ID','forexpr',5,'p_forexpr','parser2.py',127),
  ('matrix -> numexpr : numexpr','matrix',3,'p_matrix','parser2.py',130),
  ('matrix -> [ row ; rows ]','matrix',5,'p_matrix','parser2.py',131),
  ('matrix -> ( matrix )','matrix',3,'p_matrix','parser2.py',132),
  ('matrix -> ZEROS ( numexpr )','matrix',4,'p_matrix','parser2.py',133),
  ('matrix -> ONES ( numexpr )','matrix',4,'p_matrix','parser2.py',134),
  ('matrix -> EYE ( numexpr )','matrix',4,'p_matrix','parser2.py',135),
  ('matrix -> matrix TRANSPOSE','matrix',2,'p_matrix','parser2.py',136),
  ('matrix -> ID','matrix',1,'p_matrix','parser2.py',137),
  ('rows -> row ; rows','rows',3,'p_rows','parser2.py',140),
  ('rows -> row','rows',1,'p_rows','parser2.py',141),
  ('row -> rowelems','row',1,'p_row','parser2.py',144),
  ('rowelems -> rowelem , rowelems','rowelems',3,'p_rowelems','parser2.py',147),
  ('rowelems -> rowelem','rowelems',1,'p_rowelems','parser2.py',148),
  ('rowelem -> INTEGER','rowelem',1,'p_rowelem','parser2.py',151),
  ('rowelem -> FLOAT','rowelem',1,'p_rowelem','parser2.py',152),
  ('logexpr -> numexpr EQ numexpr','logexpr',3,'p_logexpr','parser2.py',155),
  ('logexpr -> numexpr GEQ numexpr','logexpr',3,'p_logexpr','parser2.py',156),
  ('logexpr -> numexpr LEQ numexpr','logexpr',3,'p_logexpr','parser2.py',157),
  ('logexpr -> numexpr NEQ numexpr','logexpr',3,'p_logexpr','parser2.py',158),
  ('logexpr -> numexpr > numexpr','logexpr',3,'p_logexpr','parser2.py',159),
  ('logexpr -> numexpr < numexpr','logexpr',3,'p_logexpr','parser2.py',160),
  ('logexpr -> ID','logexpr',1,'p_logexpr','parser2.py',161),
  ('numexpr -> numexpr + numexpr','numexpr',3,'p_numexpr','parser2.py',179),
  ('numexpr -> numexpr - numexpr','numexpr',3,'p_numexpr','parser2.py',180),
  ('numexpr -> numexpr * numexpr','numexpr',3,'p_numexpr','parser2.py',181),
  ('numexpr -> numexpr / numexpr','numexpr',3,'p_numexpr','parser2.py',182),
  ('numexpr -> numexpr DOTADD numexpr','numexpr',3,'p_numexpr','parser2.py',183),
  ('numexpr -> numexpr DOTSUB numexpr','numexpr',3,'p_numexpr','parser2.py',184),
  ('numexpr -> numexpr DOTMUL numexpr','numexpr',3,'p_numexpr','parser2.py',185),
  ('numexpr -> numexpr DOTDIV numexpr','numexpr',3,'p_numexpr','parser2.py',186),
  ('numexpr -> ( numexpr )','numexpr',3,'p_numexpr','parser2.py',187),
  ('numexpr -> - numexpr','numexpr',2,'p_numexpr','parser2.py',188),
  ('numexpr -> INTEGER','numexpr',1,'p_numexpr','parser2.py',189),
  ('numexpr -> FLOAT','numexpr',1,'p_numexpr','parser2.py',190),
  ('numexpr -> matrix','numexpr',1,'p_numexpr','parser2.py',191),
  ('numexpr -> ID','numexpr',1,'p_numexpr','parser2.py',192),
  ('return -> RETURN ;','return',2,'p_return','parser2.py',212),
  ('return -> RETURN variable ;','return',3,'p_return','parser2.py',213),
  ('return -> RETURN INTEGER ;','return',3,'p_return','parser2.py',214),
  ('return -> RETURN FLOAT ;','return',3,'p_return','parser2.py',215),
  ('return -> RETURN STRING ;','return',3,'p_return','parser2.py',216),
  ('return -> RETURN logexpr','return',2,'p_return','parser2.py',217),
]
