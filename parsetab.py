
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftIFleftELSEleft:,left=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNDOTADDASSIGNDOTSUBASSIGNDOTMULASSIGNDOTDIVASSIGNleft<>EQLEQGEQNEQleftUMINUSleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVleftTRANSPOSEADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTADDASSIGN DOTDIV DOTDIVASSIGN DOTMUL DOTMULASSIGN DOTSUB DOTSUBASSIGN ELSE EQ EYE FLOAT FOR GEQ ID IF INTEGER LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN TRANSPOSE WHILE ZEROSprogram : instructionsinstructions : instruction instructions\n                        | instruction\n                        | '{' instructions '}'instruction  : assignment ';'\n                        | conditional\n                        | BREAK ';'\n                        | CONTINUE ';'\n                        | RETURN rvalue ';'\n                        | RETURN ';'\n                        | PRINT '(' prtvalues ')' ';' assignment   : variable '=' rvalue\n                        | variable DOTADDASSIGN rvalue\n                        | variable DOTSUBASSIGN rvalue\n                        | variable DOTMULASSIGN rvalue\n                        | variable DOTDIVASSIGN rvalue\n                        | variable ADDASSIGN rvalue\n                        | variable SUBASSIGN rvalue\n                        | variable MULASSIGN rvalue\n                        | variable DIVASSIGN rvaluevariable : ID\n                    | matrixelemmatrixelem   : ID '[' expr ',' expr ']'conditional  : IF '(' expr ')' block %prec IF\n                        | IF '(' expr ')' block ELSE block\n                        | FOR '(' forexpr ')' block\n                        | WHILE '(' expr ')' blockblock : instruction\n                 | '{' instructions '}' prtvalues    : rvalue ',' prtvalues\n                        | rvaluervalue   : expr\n                    | matrixelem\n                    | strstr      : STRINGforexpr  : ID '=' expr ':' exprrows : rowelems ';' rows\n                | rowelemsrowelems : rvalue ',' rowelems\n                    | rvalueexpr : expr '+' expr\n                | expr '-' expr\n                | expr '*' expr\n                | expr '/' expr\n                | '-' expr %prec UMINUS\n                | expr DOTADD expr\n                | expr DOTSUB expr\n                | expr DOTMUL expr\n                | expr DOTDIV expr\n                | expr EQ expr\n                | expr GEQ expr\n                | expr LEQ expr\n                | expr NEQ expr\n                | expr '>' expr\n                | expr '<' expr\n                | '[' rows ']'\n                | '(' expr ')'\n                | ZEROS '(' expr ')'\n                | ONES '(' expr ')'\n                | EYE '(' expr ')'\n                | expr TRANSPOSE\n                | INTEGER\n                | FLOAT\n                | ID"
    
_lr_action_items = {'{':([0,3,4,6,19,20,21,23,52,116,117,119,126,128,129,130,131,133,135,139,140,],[4,4,4,-6,-5,-7,-8,-10,-9,130,130,130,-11,-24,-28,4,-26,-27,130,-25,-29,]),'BREAK':([0,3,4,6,19,20,21,23,52,116,117,119,126,128,129,130,131,133,135,139,140,],[7,7,7,-6,-5,-7,-8,-10,-9,7,7,7,-11,-24,-28,7,-26,-27,7,-25,-29,]),'CONTINUE':([0,3,4,6,19,20,21,23,52,116,117,119,126,128,129,130,131,133,135,139,140,],[8,8,8,-6,-5,-7,-8,-10,-9,8,8,8,-11,-24,-28,8,-26,-27,8,-25,-29,]),'RETURN':([0,3,4,6,19,20,21,23,52,116,117,119,126,128,129,130,131,133,135,139,140,],[9,9,9,-6,-5,-7,-8,-10,-9,9,9,9,-11,-24,-28,9,-26,-27,9,-25,-29,]),'PRINT':([0,3,4,6,19,20,21,23,52,116,117,119,126,128,129,130,131,133,135,139,140,],[10,10,10,-6,-5,-7,-8,-10,-9,10,10,10,-11,-24,-28,10,-26,-27,10,-25,-29,]),'IF':([0,3,4,6,19,20,21,23,52,116,117,119,126,128,129,130,131,133,135,139,140,],[12,12,12,-6,-5,-7,-8,-10,-9,12,12,12,-11,-24,-28,12,-26,-27,12,-25,-29,]),'FOR':([0,3,4,6,19,20,21,23,52,116,117,119,126,128,129,130,131,133,135,139,140,],[13,13,13,-6,-5,-7,-8,-10,-9,13,13,13,-11,-24,-28,13,-26,-27,13,-25,-29,]),'WHILE':([0,3,4,6,19,20,21,23,52,116,117,119,126,128,129,130,131,133,135,139,140,],[14,14,14,-6,-5,-7,-8,-10,-9,14,14,14,-11,-24,-28,14,-26,-27,14,-25,-29,]),'ID':([0,3,4,6,9,19,20,21,23,27,28,29,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,108,109,115,116,117,118,119,120,126,128,129,130,131,133,135,137,139,140,],[15,15,15,-6,35,-5,-7,-8,-10,69,35,69,35,35,35,35,35,35,35,35,35,35,69,90,69,69,-9,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,35,35,35,15,15,69,15,69,-11,-24,-28,15,-26,-27,15,69,-25,-29,]),'$end':([1,2,3,6,17,19,20,21,23,51,52,126,128,129,131,133,139,140,],[0,-1,-3,-6,-2,-5,-7,-8,-10,-4,-9,-11,-24,-28,-26,-27,-25,-29,]),'}':([3,6,17,18,19,20,21,23,51,52,126,128,129,131,133,136,139,140,],[-3,-6,-2,51,-5,-7,-8,-10,-4,-9,-11,-24,-28,-26,-27,140,-25,-29,]),';':([5,7,8,9,22,24,25,26,33,34,35,36,67,68,69,71,72,79,80,81,82,83,84,85,86,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,114,122,123,124,125,138,],[19,20,21,23,52,-32,-33,-34,-62,-63,-64,-35,-61,-45,-64,108,-40,-12,-13,-14,-15,-16,-17,-18,-19,-20,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,126,-39,-58,-59,-60,-23,]),'ELSE':([6,19,20,21,23,52,126,128,129,131,133,139,140,],[-6,-5,-7,-8,-10,-9,-11,135,-28,-26,-27,-25,-29,]),'-':([9,24,27,28,29,33,34,35,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,75,76,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,118,120,123,124,125,132,134,137,141,],[27,54,27,27,27,-62,-63,-64,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-61,54,-64,54,27,27,27,54,54,54,-41,-42,-43,-44,-46,-47,-48,-49,54,54,54,54,54,54,-56,27,27,-57,54,54,54,27,27,27,-58,-59,-60,54,54,27,54,]),'[':([9,15,27,28,29,35,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,108,109,115,118,120,137,],[28,50,28,28,28,50,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'(':([9,10,12,13,14,27,28,29,30,31,32,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,108,109,115,118,120,137,],[29,37,47,48,49,29,29,29,74,75,76,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'ZEROS':([9,27,28,29,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,108,109,115,118,120,137,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'ONES':([9,27,28,29,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,108,109,115,118,120,137,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'EYE':([9,27,28,29,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,108,109,115,118,120,137,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'INTEGER':([9,27,28,29,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,108,109,115,118,120,137,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'FLOAT':([9,27,28,29,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,108,109,115,118,120,137,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'STRING':([9,28,37,38,39,40,41,42,43,44,45,46,108,109,115,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'=':([11,15,16,90,138,],[38,-21,-22,118,-23,]),'DOTADDASSIGN':([11,15,16,138,],[39,-21,-22,-23,]),'DOTSUBASSIGN':([11,15,16,138,],[40,-21,-22,-23,]),'DOTMULASSIGN':([11,15,16,138,],[41,-21,-22,-23,]),'DOTDIVASSIGN':([11,15,16,138,],[42,-21,-22,-23,]),'ADDASSIGN':([11,15,16,138,],[43,-21,-22,-23,]),'SUBASSIGN':([11,15,16,138,],[44,-21,-22,-23,]),'MULASSIGN':([11,15,16,138,],[45,-21,-22,-23,]),'DIVASSIGN':([11,15,16,138,],[46,-21,-22,-23,]),',':([24,25,26,33,34,35,36,67,68,69,72,78,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,123,124,125,138,],[-32,-33,-34,-62,-63,-64,-35,-61,-45,-64,109,115,120,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-23,]),']':([24,25,26,33,34,35,36,67,68,69,70,71,72,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,121,122,123,124,125,134,138,],[-32,-33,-34,-62,-63,-64,-35,-61,-45,-64,107,-38,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-37,-39,-58,-59,-60,138,-23,]),')':([24,25,26,33,34,35,36,67,68,69,73,77,78,88,89,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,127,138,141,],[-32,-33,-34,-62,-63,-64,-35,-61,-45,-64,110,114,-31,116,117,119,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,123,124,125,-58,-59,-60,-30,-23,-36,]),'+':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[53,-62,-63,-64,-61,53,-64,53,53,53,53,-41,-42,-43,-44,-46,-47,-48,-49,53,53,53,53,53,53,-56,-57,53,53,53,-58,-59,-60,53,53,53,]),'*':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[55,-62,-63,-64,-61,55,-64,55,55,55,55,55,55,-43,-44,55,55,-48,-49,55,55,55,55,55,55,-56,-57,55,55,55,-58,-59,-60,55,55,55,]),'/':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[56,-62,-63,-64,-61,56,-64,56,56,56,56,56,56,-43,-44,56,56,-48,-49,56,56,56,56,56,56,-56,-57,56,56,56,-58,-59,-60,56,56,56,]),'DOTADD':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[57,-62,-63,-64,-61,57,-64,57,57,57,57,-41,-42,-43,-44,-46,-47,-48,-49,57,57,57,57,57,57,-56,-57,57,57,57,-58,-59,-60,57,57,57,]),'DOTSUB':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[58,-62,-63,-64,-61,58,-64,58,58,58,58,-41,-42,-43,-44,-46,-47,-48,-49,58,58,58,58,58,58,-56,-57,58,58,58,-58,-59,-60,58,58,58,]),'DOTMUL':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[59,-62,-63,-64,-61,59,-64,59,59,59,59,59,59,-43,-44,59,59,-48,-49,59,59,59,59,59,59,-56,-57,59,59,59,-58,-59,-60,59,59,59,]),'DOTDIV':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[60,-62,-63,-64,-61,60,-64,60,60,60,60,60,60,-43,-44,60,60,-48,-49,60,60,60,60,60,60,-56,-57,60,60,60,-58,-59,-60,60,60,60,]),'EQ':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[61,-62,-63,-64,-61,-45,-64,61,61,61,61,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,61,61,61,-58,-59,-60,61,61,61,]),'GEQ':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[62,-62,-63,-64,-61,-45,-64,62,62,62,62,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,62,62,62,-58,-59,-60,62,62,62,]),'LEQ':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[63,-62,-63,-64,-61,-45,-64,63,63,63,63,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,63,63,63,-58,-59,-60,63,63,63,]),'NEQ':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[64,-62,-63,-64,-61,-45,-64,64,64,64,64,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,64,64,64,-58,-59,-60,64,64,64,]),'>':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[65,-62,-63,-64,-61,-45,-64,65,65,65,65,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,65,65,65,-58,-59,-60,65,65,65,]),'<':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[66,-62,-63,-64,-61,-45,-64,66,66,66,66,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,66,66,66,-58,-59,-60,66,66,66,]),'TRANSPOSE':([24,33,34,35,67,68,69,73,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,123,124,125,132,134,141,],[67,-62,-63,-64,-61,67,-64,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-56,-57,67,67,67,-58,-59,-60,67,67,67,]),':':([33,34,67,68,69,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,123,124,125,132,],[-62,-63,-61,-45,-64,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,137,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,3,4,130,],[2,17,18,136,]),'instruction':([0,3,4,116,117,119,130,135,],[3,3,3,129,129,129,3,129,]),'assignment':([0,3,4,116,117,119,130,135,],[5,5,5,5,5,5,5,5,]),'conditional':([0,3,4,116,117,119,130,135,],[6,6,6,6,6,6,6,6,]),'variable':([0,3,4,116,117,119,130,135,],[11,11,11,11,11,11,11,11,]),'matrixelem':([0,3,4,9,28,37,38,39,40,41,42,43,44,45,46,108,109,115,116,117,119,130,135,],[16,16,16,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,16,16,16,16,16,]),'rvalue':([9,28,37,38,39,40,41,42,43,44,45,46,108,109,115,],[22,72,78,79,80,81,82,83,84,85,86,87,72,72,78,]),'expr':([9,27,28,29,37,38,39,40,41,42,43,44,45,46,47,49,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,108,109,115,118,120,137,],[24,68,24,73,24,24,24,24,24,24,24,24,24,24,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,113,24,24,24,132,134,141,]),'str':([9,28,37,38,39,40,41,42,43,44,45,46,108,109,115,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'rows':([28,108,],[70,121,]),'rowelems':([28,108,109,],[71,71,122,]),'prtvalues':([37,115,],[77,127,]),'forexpr':([48,],[89,]),'block':([116,117,119,135,],[128,131,133,139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','parser2.py',41),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','parser2.py',45),
  ('instructions -> instruction','instructions',1,'p_instructions','parser2.py',46),
  ('instructions -> { instructions }','instructions',3,'p_instructions','parser2.py',47),
  ('instruction -> assignment ;','instruction',2,'p_instruction','parser2.py',57),
  ('instruction -> conditional','instruction',1,'p_instruction','parser2.py',58),
  ('instruction -> BREAK ;','instruction',2,'p_instruction','parser2.py',59),
  ('instruction -> CONTINUE ;','instruction',2,'p_instruction','parser2.py',60),
  ('instruction -> RETURN rvalue ;','instruction',3,'p_instruction','parser2.py',61),
  ('instruction -> RETURN ;','instruction',2,'p_instruction','parser2.py',62),
  ('instruction -> PRINT ( prtvalues ) ;','instruction',5,'p_instruction','parser2.py',63),
  ('assignment -> variable = rvalue','assignment',3,'p_assignment','parser2.py',72),
  ('assignment -> variable DOTADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',73),
  ('assignment -> variable DOTSUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',74),
  ('assignment -> variable DOTMULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',75),
  ('assignment -> variable DOTDIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',76),
  ('assignment -> variable ADDASSIGN rvalue','assignment',3,'p_assignment','parser2.py',77),
  ('assignment -> variable SUBASSIGN rvalue','assignment',3,'p_assignment','parser2.py',78),
  ('assignment -> variable MULASSIGN rvalue','assignment',3,'p_assignment','parser2.py',79),
  ('assignment -> variable DIVASSIGN rvalue','assignment',3,'p_assignment','parser2.py',80),
  ('variable -> ID','variable',1,'p_variable','parser2.py',84),
  ('variable -> matrixelem','variable',1,'p_variable','parser2.py',85),
  ('matrixelem -> ID [ expr , expr ]','matrixelem',6,'p_matrixelem','parser2.py',89),
  ('conditional -> IF ( expr ) block','conditional',5,'p_conditional','parser2.py',93),
  ('conditional -> IF ( expr ) block ELSE block','conditional',7,'p_conditional','parser2.py',94),
  ('conditional -> FOR ( forexpr ) block','conditional',5,'p_conditional','parser2.py',95),
  ('conditional -> WHILE ( expr ) block','conditional',5,'p_conditional','parser2.py',96),
  ('block -> instruction','block',1,'p_block','parser2.py',103),
  ('block -> { instructions }','block',3,'p_block','parser2.py',104),
  ('prtvalues -> rvalue , prtvalues','prtvalues',3,'p_prtvalues','parser2.py',111),
  ('prtvalues -> rvalue','prtvalues',1,'p_prtvalues','parser2.py',112),
  ('rvalue -> expr','rvalue',1,'p_rvalue','parser2.py',119),
  ('rvalue -> matrixelem','rvalue',1,'p_rvalue','parser2.py',120),
  ('rvalue -> str','rvalue',1,'p_rvalue','parser2.py',121),
  ('str -> STRING','str',1,'p_str','parser2.py',125),
  ('forexpr -> ID = expr : expr','forexpr',5,'p_forexpr','parser2.py',129),
  ('rows -> rowelems ; rows','rows',3,'p_rows','parser2.py',133),
  ('rows -> rowelems','rows',1,'p_rows','parser2.py',134),
  ('rowelems -> rvalue , rowelems','rowelems',3,'p_rowelems','parser2.py',141),
  ('rowelems -> rvalue','rowelems',1,'p_rowelems','parser2.py',142),
  ('expr -> expr + expr','expr',3,'p_expr','parser2.py',149),
  ('expr -> expr - expr','expr',3,'p_expr','parser2.py',150),
  ('expr -> expr * expr','expr',3,'p_expr','parser2.py',151),
  ('expr -> expr / expr','expr',3,'p_expr','parser2.py',152),
  ('expr -> - expr','expr',2,'p_expr','parser2.py',153),
  ('expr -> expr DOTADD expr','expr',3,'p_expr','parser2.py',154),
  ('expr -> expr DOTSUB expr','expr',3,'p_expr','parser2.py',155),
  ('expr -> expr DOTMUL expr','expr',3,'p_expr','parser2.py',156),
  ('expr -> expr DOTDIV expr','expr',3,'p_expr','parser2.py',157),
  ('expr -> expr EQ expr','expr',3,'p_expr','parser2.py',158),
  ('expr -> expr GEQ expr','expr',3,'p_expr','parser2.py',159),
  ('expr -> expr LEQ expr','expr',3,'p_expr','parser2.py',160),
  ('expr -> expr NEQ expr','expr',3,'p_expr','parser2.py',161),
  ('expr -> expr > expr','expr',3,'p_expr','parser2.py',162),
  ('expr -> expr < expr','expr',3,'p_expr','parser2.py',163),
  ('expr -> [ rows ]','expr',3,'p_expr','parser2.py',164),
  ('expr -> ( expr )','expr',3,'p_expr','parser2.py',165),
  ('expr -> ZEROS ( expr )','expr',4,'p_expr','parser2.py',166),
  ('expr -> ONES ( expr )','expr',4,'p_expr','parser2.py',167),
  ('expr -> EYE ( expr )','expr',4,'p_expr','parser2.py',168),
  ('expr -> expr TRANSPOSE','expr',2,'p_expr','parser2.py',169),
  ('expr -> INTEGER','expr',1,'p_expr','parser2.py',170),
  ('expr -> FLOAT','expr',1,'p_expr','parser2.py',171),
  ('expr -> ID','expr',1,'p_expr','parser2.py',172),
]
